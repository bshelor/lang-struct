--[ 2019.03.10.13.27.45.657.0 ]--
NewLogger: A02
Version: 1.2
--[ 2019.03.10.13.27.45.672.0 ]--
InitTree:
/.antlr/Antlr_action.interp
/.antlr/Antlr_action.tokens
/.antlr/Antlr_actionLexer.java
/.antlr/Antlr_actionParser.java
/.antlr/Antlr_actionLexer.interp
/.antlr/Antlr_actionLexer.tokens
/rdp.py
/Test.java
/README.html
/rdp_input.txt
/Antlr_action.g4
/rdp_working.PNG
/antlr-runtime-4.7.2.jar

--[ 2019.03.10.13.27.45.688.0 ]--
InitFile: /Antlr_action.g4
grammar Antlr_action;

start : list 'EOF';
list : expr ';' list | ;
expr : term terms;
terms : '+' term terms | '-' term terms | ;
term : factor factors;
factors : '*' factor factors | '/' factor factors | 'MOD' factor factors | ;
factor : '(' expr ')' | ID | NUM;

ID : [A-Za-z]([A-Za-z] | [0-9])*;
NUM : [0-9]([0-9])*;

--[ 2019.03.10.13.27.45.688.1 ]--
InitFile: /rdp_input.txt
2 + 43 * AB;  4 + f;
    8 * 5 + ty6 / (7 MOD
    3); 4*5MOD; EOF

--[ 2019.03.10.13.27.45.688.2 ]--
InitFile: /README.html
<meta charset="utf-8" lang="en">

**A02 - Language Translation**


Student Info
============

Your name: Bryson Shelor

Operating system: Windows 10

Lab computer or your own computer: My own computer

TA's or Tutor's name (if received help): NA

Did you receive help from your instructor? Yes.  Thank you!!


Implementations
================


Recursive Descent Parser
--------------------------------

To run this file, navigate to your command line and type in the following:
~~~~~~~~~~~ Python
python rdp.py rdp_input.txt
~~~~~~~~~~~

As you can see, I take the input from a file.  After parsing through this input, I display
the proper Postfix format on standard output. (See below)

![My Python RDP program running against an input file](./rdp_working.png)

I was able to store the line numbers of where the variables first appeared, and I display
that with my symbolTable dump.  Other than that, this program runs pretty standard and displays
the output in the proper postfix format.

My implementation was written in Python and uses a lot of recursion and dictionaries.  I have multiple
dictionaries that store iteration information, the tokenized input, and the symbol table.  This might not
be the most efficient tactic, but it gets the job done.  I can basically add infinite amount of information
that I want for each token, as each one is stored as its own dictionary.

This was quite difficult for me.  It was tough for me to conceptualize the recursive nature of this
program.  Translating the grammar into code proved to be very hard and time consuming.  I spent 13 hours on 
this 1/3 of the project alone.  Not good.  But I was able to power through and finish, and it feels good!
I feel like I have a much better understanding of how this kind of thing works, and I think this will help
me a lot with the group project.  Wrestling with the hard problems will allow me to be more effective in 
similar situations in the future.


C: Recursive Descent Parser
--------------------------------

I was unable to spend time on this implementation.

Java: ANTLR + Java Code in IntelliJ Project
--------------------------------

I was unable to spend time on this implementation.


Assignment Reflection
======================

Hours to complete assignment: 13 (RDP)





<!--

Leave the following, as this will format your text above to look nice.

-->

<!-- Markdeep: --><style class="fallback">body{visibility:hidden;white-space:pre;font-family:monospace}</style><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js"></script><script>window.alreadyProcessedMarkdeep||(document.body.style.visibility="visible");</script>

--[ 2019.03.10.13.27.45.688.3 ]--
InitFile: /Test.java
import org.antlr.v4.runtime.CommonTokenStream;
import org.antlr.v4.runtime.ANTLRInputStream;
import org.antlr.v4.runtime.ParserRuleContext;
import org.antlr.v4.runtime.tree.ErrorNode;
import org.antlr.v4.runtime.tree.TerminalNode;

import java.io.FileInputStream;

public class Test {
    public static void main(String[] args) throws Exception {
        FileInputStream inputstream = new FileInputStream("inputs/test.txt");
        ANTLRInputStream input = new ANTLRInputStream(inputstream);
        ExprLexer lexer = new ExprLexer(input);
        CommonTokenStream tokens = new CommonTokenStream(lexer);
        ExprParser parser = new ExprParser(tokens);
        parser.prog(); // parse the input stream!
    };
}

--[ 2019.03.10.13.27.45.688.4 ]--
InitFile: /rdp.py
import sys

global dictList, validTags, tokenIter, symbolTable

dictList = []
symbolTable = []
validTags = ['NUM','ID','FACTOR','TERM','MOD','OTHER','EXPR_END','PAREN']
tokenIter = {'line': 0, 'iter': 0}

def initDict(length):
    global dictList
    lst = ["term","factor","keyword","parenthesis","EOF","terminal"]
    for i in range(length):
        dictList.append({})
        for item in lst:
            if item == "terminal":
                dictList[i][item] = {"NUM": {}, "ID":{}}
            else:
                dictList[i][item] = {}
            

def processInput(fileName):
    file = open(fileName, "r")
    statement = ""
    lst = []
    for x in file:
        for char in x:
            if char == ";" or "EOF" in statement+char:
                statement += char
                lst.append(statement)
                statement = ""
            elif char not in ["\n"]:
                statement+=char
    file.close() 
    return lst


def next(string, pos):
    nextChar = string[pos]
    item = ""

    while nextChar == " ":
        pos += 1
        nextChar = string[pos]
    
    if isLetter(nextChar):
        ## is a letter
        item += nextChar
        pos += 1
        while isLetter(string[pos]) or isNum(string[pos]):
            item += string[pos]
            pos += 1
            if pos >= len(string):
                break

        if item == "MOD":
            return item, pos, 'MOD'
        elif item == 'EOF':
            return item, pos, 'EOF'

        return item, pos, 'ID'

    if isNum(nextChar):
        ## is a number
        item += nextChar
        pos += 1
        while isNum(string[pos]):
            item += string[pos]
            pos += 1
            if pos >= len(string):
                break
                
        return item, pos, "NUM"

    if nextChar == ';':
        return nextChar, pos+1, "EXPR_END"
    elif nextChar in ['(',')']:
        return nextChar, pos+1, "PAREN"
    elif nextChar in [':',',','-','\n','\r']:
        return nextChar, pos+1, "OTHER" 
    elif nextChar in ['-','+']:
        return nextChar, pos+1, "TERM"
    elif nextChar in ['*','/']:
        return nextChar, pos+1, "FACTOR"
    else:
        return "Syntax Error", pos+1, "ERR"


def isLetter(char):
    if (char >= "A" and char <= "Z") or (char >= "a" and char <= "z"):
        return True
    else:
        return False

def isNum(char):
    if (char >= "0" and char <= "9"):
        return True
    else:
        return False

def tokenize(lst):
    global dictList
    pos = 0

    for line in range(len(lst)):
        dictList[line] = []
        pos = 0
        while pos < len(lst[line]):
            item, pos, tag = next(lst[line], pos)
            dictList[line].append({'item': item, 'line_pos': (pos-len(item)), 'line_num': line, 'tag': tag})    

def error(type, token, msg):
    print("\n"+type+" Error ----------------------------------")
    print("on line "+str(token["line_num"])+", near '"+str(token["item"])+"'")
    print(msg)
    exit()

def token():
    global tokenIter, dictList

    if tokenIter['line'] == len(dictList):
        return "done"

    val = dictList[tokenIter['line']][tokenIter['iter']]

    if tokenIter['iter'] == ( len(dictList[tokenIter['line']]) - 1 ):
        tokenIter['line'] += 1
        tokenIter['iter'] = 0
    else:
        tokenIter['iter'] += 1

    return val

def peek():
    global tokenIter, dictList

    return dictList[tokenIter['line']][tokenIter['iter']]

def match(char):
    if char != ';':
        print(char, end=" ")
    else:
        print(char)

def Start():
    global validTags

    val = peek()

    if val['tag'] in validTags:
        List()
    elif val['tag'] == "EOF":
        EOF()
    else:
        error("Syntax", val, "Invalid input")
    EOF()

def EOF():
    match("EOF")
    print()
    dumpSymbolTable()

def List():
    val = peek()
    if val['item'] == '(' or val['tag'] in ["NUM","ID"]:
        Expr()
        match(';')
        token()
        List()
    else:
        return

def Expr():
    Term()
    Terms()

def Term():
    Factor()
    Factors()

def Terms():
    val = peek()
    if val['item'] in ['+','-']:
        token()
        Term()
        match(val['item'])
        Terms()
    else:
        return

def Factor():
    global symbolTable
    val = peek()
    if val['item'] == '(':
        token()
        match(val['item'])
        Expr()
        val = token()
        if val['item'] != ')':
            error("Syntax", val, "Must end an expression with a closing ')'")
        else:
            match(val['item'])
    elif val['tag'] == 'ID':
        token()
        match(val['item'])
        symbolTable.append(val)
    elif val['tag'] == 'NUM':
        token()
        match(val['item'])

def Factors():
    val = peek()
    if val['item'] in ['*','/']:
        token()
        Factor()
        match(val['item'])              ## print '*' or '/'
        Factors()
    elif val['tag'] == 'MOD':
        token()
        Factor()
        match(val['item'])
        Factors()
    elif val['tag'] == 'ID':
        error("Syntax", val, "Can't have letters directly after a number. Hint: try putting a space or an operand in between")
    else:
        return

def dumpSymbolTable():
    global symbolTable
    print("Symbol Table:", end=" ")
    for i in symbolTable:
        print(str(i['item'])+' (line '+str(i['line_num'])+'), ', end="")



def main():
    global dictList
    fileName = sys.argv[1]
    listOfStatements = processInput(fileName)
    initDict(len(listOfStatements))
    
    tokenize(listOfStatements)

    print("\n", "-------------Postfix Translation and Symbol Table Dump-------------")
    Start()
    print()

main()

--[ 2019.03.10.13.27.49.961.0 ]--
UpdateTree (AD): 4 0
+ /.log/history.log
+ /.idea/A02.iml
+ /.idea/modules.xml
+ /.idea/workspace.xml

--[ 2019.03.10.13.30.49.854.0 ]--
UpdateTree (AD): 1 0
+ /.idea/misc.xml

--[ 2019.03.10.13.33.51.832.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.03.10.13.34.40.126.0 ]--
UpdateTree (AD): 1 0
+ /.idea/libraries/antlr_runtime_4_7_2.xml

--[ 2019.03.10.13.34.55.875.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.03.10.13.35.06.385.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.03.10.13.35.46.420.0 ]--
DisposeComponent
--[ 2019.03.10.13.36.48.992.0 ]--
NewLogger: A02
Version: 1.2
--[ 2019.03.10.13.36.49.493.0 ]--
InitTree:
/.log/history.log
/.idea/libraries/antlr_runtime_4_7_2.xml
/.idea/A02.iml
/.idea/misc.xml
/.idea/modules.xml
/.idea/workspace.xml
/.antlr/Antlr_action.interp
/.antlr/Antlr_action.tokens
/.antlr/Antlr_actionLexer.java
/.antlr/Antlr_actionParser.java
/.antlr/Antlr_actionLexer.interp
/.antlr/Antlr_actionLexer.tokens
/rdp.py
/Test.java
/README.html
/rdp_input.txt
/Antlr_action.g4
/rdp_working.PNG
/antlr-runtime-4.7.2.jar

--[ 2019.03.10.13.36.49.512.0 ]--
InitFile: /Antlr_action.g4
grammar Antlr_action;

start : list 'EOF';
list : expr ';' list | ;
expr : term terms;
terms : '+' term terms | '-' term terms | ;
term : factor factors;
factors : '*' factor factors | '/' factor factors | 'MOD' factor factors | ;
factor : '(' expr ')' | ID | NUM;

ID : [A-Za-z]([A-Za-z] | [0-9])*;
NUM : [0-9]([0-9])*;

--[ 2019.03.10.13.36.49.521.0 ]--
InitFile: /rdp_input.txt
2 + 43 * AB;  4 + f;
    8 * 5 + ty6 / (7 MOD
    3); 4*5MOD; EOF

--[ 2019.03.10.13.36.49.526.0 ]--
InitFile: /README.html
<meta charset="utf-8" lang="en">

**A02 - Language Translation**


Student Info
============

Your name: Bryson Shelor

Operating system: Windows 10

Lab computer or your own computer: My own computer

TA's or Tutor's name (if received help): NA

Did you receive help from your instructor? Yes.  Thank you!!


Implementations
================


Recursive Descent Parser
--------------------------------

To run this file, navigate to your command line and type in the following:
~~~~~~~~~~~ Python
python rdp.py rdp_input.txt
~~~~~~~~~~~

As you can see, I take the input from a file.  After parsing through this input, I display
the proper Postfix format on standard output. (See below)

![My Python RDP program running against an input file](./rdp_working.png)

I was able to store the line numbers of where the variables first appeared, and I display
that with my symbolTable dump.  Other than that, this program runs pretty standard and displays
the output in the proper postfix format.

My implementation was written in Python and uses a lot of recursion and dictionaries.  I have multiple
dictionaries that store iteration information, the tokenized input, and the symbol table.  This might not
be the most efficient tactic, but it gets the job done.  I can basically add infinite amount of information
that I want for each token, as each one is stored as its own dictionary.

This was quite difficult for me.  It was tough for me to conceptualize the recursive nature of this
program.  Translating the grammar into code proved to be very hard and time consuming.  I spent 13 hours on 
this 1/3 of the project alone.  Not good.  But I was able to power through and finish, and it feels good!
I feel like I have a much better understanding of how this kind of thing works, and I think this will help
me a lot with the group project.  Wrestling with the hard problems will allow me to be more effective in 
similar situations in the future.


C: Recursive Descent Parser
--------------------------------

I was unable to spend time on this implementation.

Java: ANTLR + Java Code in IntelliJ Project
--------------------------------

I was unable to spend time on this implementation.


Assignment Reflection
======================

Hours to complete assignment: 13 (RDP)





<!--

Leave the following, as this will format your text above to look nice.

-->

<!-- Markdeep: --><style class="fallback">body{visibility:hidden;white-space:pre;font-family:monospace}</style><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js"></script><script>window.alreadyProcessedMarkdeep||(document.body.style.visibility="visible");</script>

--[ 2019.03.10.13.36.49.606.0 ]--
InitFile: /Test.java
import org.antlr.v4.runtime.CommonTokenStream;
import org.antlr.v4.runtime.ANTLRInputStream;
import org.antlr.v4.runtime.ParserRuleContext;
import org.antlr.v4.runtime.tree.ErrorNode;
import org.antlr.v4.runtime.tree.TerminalNode;

import java.io.FileInputStream;

public class Test {
    public static void main(String[] args) throws Exception {
        FileInputStream inputstream = new FileInputStream("inputs/test.txt");
        ANTLRInputStream input = new ANTLRInputStream(inputstream);
        ExprLexer lexer = new ExprLexer(input);
        CommonTokenStream tokens = new CommonTokenStream(lexer);
        ExprParser parser = new ExprParser(tokens);
        parser.prog(); // parse the input stream!
    };
}

--[ 2019.03.10.13.36.49.655.0 ]--
InitFile: /rdp.py
import sys

global dictList, validTags, tokenIter, symbolTable

dictList = []
symbolTable = []
validTags = ['NUM','ID','FACTOR','TERM','MOD','OTHER','EXPR_END','PAREN']
tokenIter = {'line': 0, 'iter': 0}

def initDict(length):
    global dictList
    lst = ["term","factor","keyword","parenthesis","EOF","terminal"]
    for i in range(length):
        dictList.append({})
        for item in lst:
            if item == "terminal":
                dictList[i][item] = {"NUM": {}, "ID":{}}
            else:
                dictList[i][item] = {}
            

def processInput(fileName):
    file = open(fileName, "r")
    statement = ""
    lst = []
    for x in file:
        for char in x:
            if char == ";" or "EOF" in statement+char:
                statement += char
                lst.append(statement)
                statement = ""
            elif char not in ["\n"]:
                statement+=char
    file.close() 
    return lst


def next(string, pos):
    nextChar = string[pos]
    item = ""

    while nextChar == " ":
        pos += 1
        nextChar = string[pos]
    
    if isLetter(nextChar):
        ## is a letter
        item += nextChar
        pos += 1
        while isLetter(string[pos]) or isNum(string[pos]):
            item += string[pos]
            pos += 1
            if pos >= len(string):
                break

        if item == "MOD":
            return item, pos, 'MOD'
        elif item == 'EOF':
            return item, pos, 'EOF'

        return item, pos, 'ID'

    if isNum(nextChar):
        ## is a number
        item += nextChar
        pos += 1
        while isNum(string[pos]):
            item += string[pos]
            pos += 1
            if pos >= len(string):
                break
                
        return item, pos, "NUM"

    if nextChar == ';':
        return nextChar, pos+1, "EXPR_END"
    elif nextChar in ['(',')']:
        return nextChar, pos+1, "PAREN"
    elif nextChar in [':',',','-','\n','\r']:
        return nextChar, pos+1, "OTHER" 
    elif nextChar in ['-','+']:
        return nextChar, pos+1, "TERM"
    elif nextChar in ['*','/']:
        return nextChar, pos+1, "FACTOR"
    else:
        return "Syntax Error", pos+1, "ERR"


def isLetter(char):
    if (char >= "A" and char <= "Z") or (char >= "a" and char <= "z"):
        return True
    else:
        return False

def isNum(char):
    if (char >= "0" and char <= "9"):
        return True
    else:
        return False

def tokenize(lst):
    global dictList
    pos = 0

    for line in range(len(lst)):
        dictList[line] = []
        pos = 0
        while pos < len(lst[line]):
            item, pos, tag = next(lst[line], pos)
            dictList[line].append({'item': item, 'line_pos': (pos-len(item)), 'line_num': line, 'tag': tag})    

def error(type, token, msg):
    print("\n"+type+" Error ----------------------------------")
    print("on line "+str(token["line_num"])+", near '"+str(token["item"])+"'")
    print(msg)
    exit()

def token():
    global tokenIter, dictList

    if tokenIter['line'] == len(dictList):
        return "done"

    val = dictList[tokenIter['line']][tokenIter['iter']]

    if tokenIter['iter'] == ( len(dictList[tokenIter['line']]) - 1 ):
        tokenIter['line'] += 1
        tokenIter['iter'] = 0
    else:
        tokenIter['iter'] += 1

    return val

def peek():
    global tokenIter, dictList

    return dictList[tokenIter['line']][tokenIter['iter']]

def match(char):
    if char != ';':
        print(char, end=" ")
    else:
        print(char)

def Start():
    global validTags

    val = peek()

    if val['tag'] in validTags:
        List()
    elif val['tag'] == "EOF":
        EOF()
    else:
        error("Syntax", val, "Invalid input")
    EOF()

def EOF():
    match("EOF")
    print()
    dumpSymbolTable()

def List():
    val = peek()
    if val['item'] == '(' or val['tag'] in ["NUM","ID"]:
        Expr()
        match(';')
        token()
        List()
    else:
        return

def Expr():
    Term()
    Terms()

def Term():
    Factor()
    Factors()

def Terms():
    val = peek()
    if val['item'] in ['+','-']:
        token()
        Term()
        match(val['item'])
        Terms()
    else:
        return

def Factor():
    global symbolTable
    val = peek()
    if val['item'] == '(':
        token()
        match(val['item'])
        Expr()
        val = token()
        if val['item'] != ')':
            error("Syntax", val, "Must end an expression with a closing ')'")
        else:
            match(val['item'])
    elif val['tag'] == 'ID':
        token()
        match(val['item'])
        symbolTable.append(val)
    elif val['tag'] == 'NUM':
        token()
        match(val['item'])

def Factors():
    val = peek()
    if val['item'] in ['*','/']:
        token()
        Factor()
        match(val['item'])              ## print '*' or '/'
        Factors()
    elif val['tag'] == 'MOD':
        token()
        Factor()
        match(val['item'])
        Factors()
    elif val['tag'] == 'ID':
        error("Syntax", val, "Can't have letters directly after a number. Hint: try putting a space or an operand in between")
    else:
        return

def dumpSymbolTable():
    global symbolTable
    print("Symbol Table:", end=" ")
    for i in symbolTable:
        print(str(i['item'])+' (line '+str(i['line_num'])+'), ', end="")



def main():
    global dictList
    fileName = sys.argv[1]
    listOfStatements = processInput(fileName)
    initDict(len(listOfStatements))
    
    tokenize(listOfStatements)

    print("\n", "-------------Postfix Translation and Symbol Table Dump-------------")
    Start()
    print()

main()

--[ 2019.03.10.13.37.27.806.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.03.10.13.37.45.073.0 ]--
UpdateTree (AD): 10 0
+ /gen/Antlr_action.interp
+ /gen/Antlr_action.tokens
+ /gen/Antlr_actionLexer.java
+ /gen/Antlr_actionParser.java
+ /gen/Antlr_actionLexer.interp
+ /gen/Antlr_actionLexer.tokens
+ /gen/Antlr_actionVisitor.java
+ /gen/Antlr_actionListener.java
+ /gen/Antlr_actionBaseVisitor.java
+ /gen/Antlr_actionBaseListener.java

--[ 2019.03.10.13.37.45.076.0 ]--
InitFile: /gen/Antlr_action.interp
token literal names:
null
'EOF'
';'
'+'
'-'
'*'
'/'
'MOD'
'('
')'
null
null

token symbolic names:
null
null
null
null
null
null
null
null
null
null
ID
NUM

rule names:
start
list
expr
terms
term
factors
factor


atn:
[3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 3, 13, 67, 4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7, 9, 7, 4, 8, 9, 8, 3, 2, 3, 2, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 3, 25, 10, 3, 3, 4, 3, 4, 3, 4, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 5, 39, 10, 5, 3, 6, 3, 6, 3, 6, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 5, 7, 57, 10, 7, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 5, 8, 65, 10, 8, 3, 8, 2, 2, 9, 2, 4, 6, 8, 10, 12, 14, 2, 2, 2, 67, 2, 16, 3, 2, 2, 2, 4, 24, 3, 2, 2, 2, 6, 26, 3, 2, 2, 2, 8, 38, 3, 2, 2, 2, 10, 40, 3, 2, 2, 2, 12, 56, 3, 2, 2, 2, 14, 64, 3, 2, 2, 2, 16, 17, 5, 4, 3, 2, 17, 18, 7, 3, 2, 2, 18, 3, 3, 2, 2, 2, 19, 20, 5, 6, 4, 2, 20, 21, 7, 4, 2, 2, 21, 22, 5, 4, 3, 2, 22, 25, 3, 2, 2, 2, 23, 25, 3, 2, 2, 2, 24, 19, 3, 2, 2, 2, 24, 23, 3, 2, 2, 2, 25, 5, 3, 2, 2, 2, 26, 27, 5, 10, 6, 2, 27, 28, 5, 8, 5, 2, 28, 7, 3, 2, 2, 2, 29, 30, 7, 5, 2, 2, 30, 31, 5, 10, 6, 2, 31, 32, 5, 8, 5, 2, 32, 39, 3, 2, 2, 2, 33, 34, 7, 6, 2, 2, 34, 35, 5, 10, 6, 2, 35, 36, 5, 8, 5, 2, 36, 39, 3, 2, 2, 2, 37, 39, 3, 2, 2, 2, 38, 29, 3, 2, 2, 2, 38, 33, 3, 2, 2, 2, 38, 37, 3, 2, 2, 2, 39, 9, 3, 2, 2, 2, 40, 41, 5, 14, 8, 2, 41, 42, 5, 12, 7, 2, 42, 11, 3, 2, 2, 2, 43, 44, 7, 7, 2, 2, 44, 45, 5, 14, 8, 2, 45, 46, 5, 12, 7, 2, 46, 57, 3, 2, 2, 2, 47, 48, 7, 8, 2, 2, 48, 49, 5, 14, 8, 2, 49, 50, 5, 12, 7, 2, 50, 57, 3, 2, 2, 2, 51, 52, 7, 9, 2, 2, 52, 53, 5, 14, 8, 2, 53, 54, 5, 12, 7, 2, 54, 57, 3, 2, 2, 2, 55, 57, 3, 2, 2, 2, 56, 43, 3, 2, 2, 2, 56, 47, 3, 2, 2, 2, 56, 51, 3, 2, 2, 2, 56, 55, 3, 2, 2, 2, 57, 13, 3, 2, 2, 2, 58, 59, 7, 10, 2, 2, 59, 60, 5, 6, 4, 2, 60, 61, 7, 11, 2, 2, 61, 65, 3, 2, 2, 2, 62, 65, 7, 12, 2, 2, 63, 65, 7, 13, 2, 2, 64, 58, 3, 2, 2, 2, 64, 62, 3, 2, 2, 2, 64, 63, 3, 2, 2, 2, 65, 15, 3, 2, 2, 2, 6, 24, 38, 56, 64]

--[ 2019.03.10.13.37.45.079.0 ]--
InitFile: /gen/Antlr_action.tokens
T__0=1
T__1=2
T__2=3
T__3=4
T__4=5
T__5=6
T__6=7
T__7=8
T__8=9
ID=10
NUM=11
'EOF'=1
';'=2
'+'=3
'-'=4
'*'=5
'/'=6
'MOD'=7
'('=8
')'=9

--[ 2019.03.10.13.37.45.082.0 ]--
InitFile: /gen/Antlr_actionLexer.java
// Generated from C:/Users/bshelor24/Documents/Taylor 2018-19/lang-struct/A02\Antlr_action.g4 by ANTLR 4.7.2
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class Antlr_actionLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.7.2", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		ID=10, NUM=11;
	public static String[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	private static String[] makeRuleNames() {
		return new String[] {
			"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
			"ID", "NUM"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, "'EOF'", "';'", "'+'", "'-'", "'*'", "'/'", "'MOD'", "'('", "')'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, null, null, null, null, null, null, null, null, null, "ID", "NUM"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}


	public Antlr_actionLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "Antlr_action.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getChannelNames() { return channelNames; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2\r=\b\1\4\2\t\2\4"+
		"\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t"+
		"\13\4\f\t\f\3\2\3\2\3\2\3\2\3\3\3\3\3\4\3\4\3\5\3\5\3\6\3\6\3\7\3\7\3"+
		"\b\3\b\3\b\3\b\3\t\3\t\3\n\3\n\3\13\3\13\7\13\62\n\13\f\13\16\13\65\13"+
		"\13\3\f\3\f\7\f9\n\f\f\f\16\f<\13\f\2\2\r\3\3\5\4\7\5\t\6\13\7\r\b\17"+
		"\t\21\n\23\13\25\f\27\r\3\2\5\4\2C\\c|\5\2\62;C\\c|\3\2\62;\2>\2\3\3\2"+
		"\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17"+
		"\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\3\31\3\2"+
		"\2\2\5\35\3\2\2\2\7\37\3\2\2\2\t!\3\2\2\2\13#\3\2\2\2\r%\3\2\2\2\17\'"+
		"\3\2\2\2\21+\3\2\2\2\23-\3\2\2\2\25/\3\2\2\2\27\66\3\2\2\2\31\32\7G\2"+
		"\2\32\33\7Q\2\2\33\34\7H\2\2\34\4\3\2\2\2\35\36\7=\2\2\36\6\3\2\2\2\37"+
		" \7-\2\2 \b\3\2\2\2!\"\7/\2\2\"\n\3\2\2\2#$\7,\2\2$\f\3\2\2\2%&\7\61\2"+
		"\2&\16\3\2\2\2\'(\7O\2\2()\7Q\2\2)*\7F\2\2*\20\3\2\2\2+,\7*\2\2,\22\3"+
		"\2\2\2-.\7+\2\2.\24\3\2\2\2/\63\t\2\2\2\60\62\t\3\2\2\61\60\3\2\2\2\62"+
		"\65\3\2\2\2\63\61\3\2\2\2\63\64\3\2\2\2\64\26\3\2\2\2\65\63\3\2\2\2\66"+
		":\t\4\2\2\679\t\4\2\28\67\3\2\2\29<\3\2\2\2:8\3\2\2\2:;\3\2\2\2;\30\3"+
		"\2\2\2<:\3\2\2\2\6\2\61\63:\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}

--[ 2019.03.10.13.37.45.085.0 ]--
InitFile: /gen/Antlr_actionParser.java
// Generated from C:/Users/bshelor24/Documents/Taylor 2018-19/lang-struct/A02\Antlr_action.g4 by ANTLR 4.7.2
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class Antlr_actionParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.7.2", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		ID=10, NUM=11;
	public static final int
		RULE_start = 0, RULE_list = 1, RULE_expr = 2, RULE_terms = 3, RULE_term = 4, 
		RULE_factors = 5, RULE_factor = 6;
	private static String[] makeRuleNames() {
		return new String[] {
			"start", "list", "expr", "terms", "term", "factors", "factor"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, "'EOF'", "';'", "'+'", "'-'", "'*'", "'/'", "'MOD'", "'('", "')'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, null, null, null, null, null, null, null, null, null, "ID", "NUM"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "Antlr_action.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public Antlr_actionParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	public static class StartContext extends ParserRuleContext {
		public ListContext list() {
			return getRuleContext(ListContext.class,0);
		}
		public StartContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_start; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Antlr_actionListener ) ((Antlr_actionListener)listener).enterStart(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Antlr_actionListener ) ((Antlr_actionListener)listener).exitStart(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Antlr_actionVisitor ) return ((Antlr_actionVisitor<? extends T>)visitor).visitStart(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StartContext start() throws RecognitionException {
		StartContext _localctx = new StartContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_start);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(14);
			list();
			setState(15);
			match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ListContext extends ParserRuleContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public ListContext list() {
			return getRuleContext(ListContext.class,0);
		}
		public ListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Antlr_actionListener ) ((Antlr_actionListener)listener).enterList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Antlr_actionListener ) ((Antlr_actionListener)listener).exitList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Antlr_actionVisitor ) return ((Antlr_actionVisitor<? extends T>)visitor).visitList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ListContext list() throws RecognitionException {
		ListContext _localctx = new ListContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_list);
		try {
			setState(22);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__7:
			case ID:
			case NUM:
				enterOuterAlt(_localctx, 1);
				{
				setState(17);
				expr();
				setState(18);
				match(T__1);
				setState(19);
				list();
				}
				break;
			case T__0:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExprContext extends ParserRuleContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public TermsContext terms() {
			return getRuleContext(TermsContext.class,0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Antlr_actionListener ) ((Antlr_actionListener)listener).enterExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Antlr_actionListener ) ((Antlr_actionListener)listener).exitExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Antlr_actionVisitor ) return ((Antlr_actionVisitor<? extends T>)visitor).visitExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExprContext expr() throws RecognitionException {
		ExprContext _localctx = new ExprContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_expr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(24);
			term();
			setState(25);
			terms();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TermsContext extends ParserRuleContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public TermsContext terms() {
			return getRuleContext(TermsContext.class,0);
		}
		public TermsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_terms; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Antlr_actionListener ) ((Antlr_actionListener)listener).enterTerms(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Antlr_actionListener ) ((Antlr_actionListener)listener).exitTerms(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Antlr_actionVisitor ) return ((Antlr_actionVisitor<? extends T>)visitor).visitTerms(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TermsContext terms() throws RecognitionException {
		TermsContext _localctx = new TermsContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_terms);
		try {
			setState(36);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__2:
				enterOuterAlt(_localctx, 1);
				{
				setState(27);
				match(T__2);
				setState(28);
				term();
				setState(29);
				terms();
				}
				break;
			case T__3:
				enterOuterAlt(_localctx, 2);
				{
				setState(31);
				match(T__3);
				setState(32);
				term();
				setState(33);
				terms();
				}
				break;
			case T__1:
			case T__8:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TermContext extends ParserRuleContext {
		public FactorContext factor() {
			return getRuleContext(FactorContext.class,0);
		}
		public FactorsContext factors() {
			return getRuleContext(FactorsContext.class,0);
		}
		public TermContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_term; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Antlr_actionListener ) ((Antlr_actionListener)listener).enterTerm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Antlr_actionListener ) ((Antlr_actionListener)listener).exitTerm(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Antlr_actionVisitor ) return ((Antlr_actionVisitor<? extends T>)visitor).visitTerm(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TermContext term() throws RecognitionException {
		TermContext _localctx = new TermContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_term);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(38);
			factor();
			setState(39);
			factors();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FactorsContext extends ParserRuleContext {
		public FactorContext factor() {
			return getRuleContext(FactorContext.class,0);
		}
		public FactorsContext factors() {
			return getRuleContext(FactorsContext.class,0);
		}
		public FactorsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_factors; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Antlr_actionListener ) ((Antlr_actionListener)listener).enterFactors(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Antlr_actionListener ) ((Antlr_actionListener)listener).exitFactors(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Antlr_actionVisitor ) return ((Antlr_actionVisitor<? extends T>)visitor).visitFactors(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FactorsContext factors() throws RecognitionException {
		FactorsContext _localctx = new FactorsContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_factors);
		try {
			setState(54);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__4:
				enterOuterAlt(_localctx, 1);
				{
				setState(41);
				match(T__4);
				setState(42);
				factor();
				setState(43);
				factors();
				}
				break;
			case T__5:
				enterOuterAlt(_localctx, 2);
				{
				setState(45);
				match(T__5);
				setState(46);
				factor();
				setState(47);
				factors();
				}
				break;
			case T__6:
				enterOuterAlt(_localctx, 3);
				{
				setState(49);
				match(T__6);
				setState(50);
				factor();
				setState(51);
				factors();
				}
				break;
			case T__1:
			case T__2:
			case T__3:
			case T__8:
				enterOuterAlt(_localctx, 4);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FactorContext extends ParserRuleContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode ID() { return getToken(Antlr_actionParser.ID, 0); }
		public TerminalNode NUM() { return getToken(Antlr_actionParser.NUM, 0); }
		public FactorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_factor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof Antlr_actionListener ) ((Antlr_actionListener)listener).enterFactor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof Antlr_actionListener ) ((Antlr_actionListener)listener).exitFactor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof Antlr_actionVisitor ) return ((Antlr_actionVisitor<? extends T>)visitor).visitFactor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FactorContext factor() throws RecognitionException {
		FactorContext _localctx = new FactorContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_factor);
		try {
			setState(62);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__7:
				enterOuterAlt(_localctx, 1);
				{
				setState(56);
				match(T__7);
				setState(57);
				expr();
				setState(58);
				match(T__8);
				}
				break;
			case ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(60);
				match(ID);
				}
				break;
			case NUM:
				enterOuterAlt(_localctx, 3);
				{
				setState(61);
				match(NUM);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static final String _serializedATN =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\rC\4\2\t\2\4\3\t"+
		"\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\3\2\3\2\3\2\3\3\3\3\3\3\3\3"+
		"\3\3\5\3\31\n\3\3\4\3\4\3\4\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\5\5\'"+
		"\n\5\3\6\3\6\3\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\5"+
		"\79\n\7\3\b\3\b\3\b\3\b\3\b\3\b\5\bA\n\b\3\b\2\2\t\2\4\6\b\n\f\16\2\2"+
		"\2C\2\20\3\2\2\2\4\30\3\2\2\2\6\32\3\2\2\2\b&\3\2\2\2\n(\3\2\2\2\f8\3"+
		"\2\2\2\16@\3\2\2\2\20\21\5\4\3\2\21\22\7\3\2\2\22\3\3\2\2\2\23\24\5\6"+
		"\4\2\24\25\7\4\2\2\25\26\5\4\3\2\26\31\3\2\2\2\27\31\3\2\2\2\30\23\3\2"+
		"\2\2\30\27\3\2\2\2\31\5\3\2\2\2\32\33\5\n\6\2\33\34\5\b\5\2\34\7\3\2\2"+
		"\2\35\36\7\5\2\2\36\37\5\n\6\2\37 \5\b\5\2 \'\3\2\2\2!\"\7\6\2\2\"#\5"+
		"\n\6\2#$\5\b\5\2$\'\3\2\2\2%\'\3\2\2\2&\35\3\2\2\2&!\3\2\2\2&%\3\2\2\2"+
		"\'\t\3\2\2\2()\5\16\b\2)*\5\f\7\2*\13\3\2\2\2+,\7\7\2\2,-\5\16\b\2-.\5"+
		"\f\7\2.9\3\2\2\2/\60\7\b\2\2\60\61\5\16\b\2\61\62\5\f\7\2\629\3\2\2\2"+
		"\63\64\7\t\2\2\64\65\5\16\b\2\65\66\5\f\7\2\669\3\2\2\2\679\3\2\2\28+"+
		"\3\2\2\28/\3\2\2\28\63\3\2\2\28\67\3\2\2\29\r\3\2\2\2:;\7\n\2\2;<\5\6"+
		"\4\2<=\7\13\2\2=A\3\2\2\2>A\7\f\2\2?A\7\r\2\2@:\3\2\2\2@>\3\2\2\2@?\3"+
		"\2\2\2A\17\3\2\2\2\6\30&8@";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}

--[ 2019.03.10.13.37.45.088.0 ]--
InitFile: /gen/Antlr_actionLexer.interp
token literal names:
null
'EOF'
';'
'+'
'-'
'*'
'/'
'MOD'
'('
')'
null
null

token symbolic names:
null
null
null
null
null
null
null
null
null
null
ID
NUM

rule names:
T__0
T__1
T__2
T__3
T__4
T__5
T__6
T__7
T__8
ID
NUM

channel names:
DEFAULT_TOKEN_CHANNEL
HIDDEN

mode names:
DEFAULT_MODE

atn:
[3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 2, 13, 61, 8, 1, 4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7, 9, 7, 4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12, 3, 2, 3, 2, 3, 2, 3, 2, 3, 3, 3, 3, 3, 4, 3, 4, 3, 5, 3, 5, 3, 6, 3, 6, 3, 7, 3, 7, 3, 8, 3, 8, 3, 8, 3, 8, 3, 9, 3, 9, 3, 10, 3, 10, 3, 11, 3, 11, 7, 11, 50, 10, 11, 12, 11, 14, 11, 53, 11, 11, 3, 12, 3, 12, 7, 12, 57, 10, 12, 12, 12, 14, 12, 60, 11, 12, 2, 2, 13, 3, 3, 5, 4, 7, 5, 9, 6, 11, 7, 13, 8, 15, 9, 17, 10, 19, 11, 21, 12, 23, 13, 3, 2, 5, 4, 2, 67, 92, 99, 124, 5, 2, 50, 59, 67, 92, 99, 124, 3, 2, 50, 59, 2, 62, 2, 3, 3, 2, 2, 2, 2, 5, 3, 2, 2, 2, 2, 7, 3, 2, 2, 2, 2, 9, 3, 2, 2, 2, 2, 11, 3, 2, 2, 2, 2, 13, 3, 2, 2, 2, 2, 15, 3, 2, 2, 2, 2, 17, 3, 2, 2, 2, 2, 19, 3, 2, 2, 2, 2, 21, 3, 2, 2, 2, 2, 23, 3, 2, 2, 2, 3, 25, 3, 2, 2, 2, 5, 29, 3, 2, 2, 2, 7, 31, 3, 2, 2, 2, 9, 33, 3, 2, 2, 2, 11, 35, 3, 2, 2, 2, 13, 37, 3, 2, 2, 2, 15, 39, 3, 2, 2, 2, 17, 43, 3, 2, 2, 2, 19, 45, 3, 2, 2, 2, 21, 47, 3, 2, 2, 2, 23, 54, 3, 2, 2, 2, 25, 26, 7, 71, 2, 2, 26, 27, 7, 81, 2, 2, 27, 28, 7, 72, 2, 2, 28, 4, 3, 2, 2, 2, 29, 30, 7, 61, 2, 2, 30, 6, 3, 2, 2, 2, 31, 32, 7, 45, 2, 2, 32, 8, 3, 2, 2, 2, 33, 34, 7, 47, 2, 2, 34, 10, 3, 2, 2, 2, 35, 36, 7, 44, 2, 2, 36, 12, 3, 2, 2, 2, 37, 38, 7, 49, 2, 2, 38, 14, 3, 2, 2, 2, 39, 40, 7, 79, 2, 2, 40, 41, 7, 81, 2, 2, 41, 42, 7, 70, 2, 2, 42, 16, 3, 2, 2, 2, 43, 44, 7, 42, 2, 2, 44, 18, 3, 2, 2, 2, 45, 46, 7, 43, 2, 2, 46, 20, 3, 2, 2, 2, 47, 51, 9, 2, 2, 2, 48, 50, 9, 3, 2, 2, 49, 48, 3, 2, 2, 2, 50, 53, 3, 2, 2, 2, 51, 49, 3, 2, 2, 2, 51, 52, 3, 2, 2, 2, 52, 22, 3, 2, 2, 2, 53, 51, 3, 2, 2, 2, 54, 58, 9, 4, 2, 2, 55, 57, 9, 4, 2, 2, 56, 55, 3, 2, 2, 2, 57, 60, 3, 2, 2, 2, 58, 56, 3, 2, 2, 2, 58, 59, 3, 2, 2, 2, 59, 24, 3, 2, 2, 2, 60, 58, 3, 2, 2, 2, 6, 2, 49, 51, 58, 2]

--[ 2019.03.10.13.37.45.091.0 ]--
InitFile: /gen/Antlr_actionLexer.tokens
T__0=1
T__1=2
T__2=3
T__3=4
T__4=5
T__5=6
T__6=7
T__7=8
T__8=9
ID=10
NUM=11
'EOF'=1
';'=2
'+'=3
'-'=4
'*'=5
'/'=6
'MOD'=7
'('=8
')'=9

--[ 2019.03.10.13.37.45.094.0 ]--
InitFile: /gen/Antlr_actionVisitor.java
// Generated from C:/Users/bshelor24/Documents/Taylor 2018-19/lang-struct/A02\Antlr_action.g4 by ANTLR 4.7.2
import org.antlr.v4.runtime.tree.ParseTreeVisitor;

/**
 * This interface defines a complete generic visitor for a parse tree produced
 * by {@link Antlr_actionParser}.
 *
 * @param <T> The return type of the visit operation. Use {@link Void} for
 * operations with no return type.
 */
public interface Antlr_actionVisitor<T> extends ParseTreeVisitor<T> {
	/**
	 * Visit a parse tree produced by {@link Antlr_actionParser#start}.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	T visitStart(Antlr_actionParser.StartContext ctx);
	/**
	 * Visit a parse tree produced by {@link Antlr_actionParser#list}.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	T visitList(Antlr_actionParser.ListContext ctx);
	/**
	 * Visit a parse tree produced by {@link Antlr_actionParser#expr}.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	T visitExpr(Antlr_actionParser.ExprContext ctx);
	/**
	 * Visit a parse tree produced by {@link Antlr_actionParser#terms}.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	T visitTerms(Antlr_actionParser.TermsContext ctx);
	/**
	 * Visit a parse tree produced by {@link Antlr_actionParser#term}.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	T visitTerm(Antlr_actionParser.TermContext ctx);
	/**
	 * Visit a parse tree produced by {@link Antlr_actionParser#factors}.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	T visitFactors(Antlr_actionParser.FactorsContext ctx);
	/**
	 * Visit a parse tree produced by {@link Antlr_actionParser#factor}.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	T visitFactor(Antlr_actionParser.FactorContext ctx);
}

--[ 2019.03.10.13.37.45.096.0 ]--
InitFile: /gen/Antlr_actionListener.java
// Generated from C:/Users/bshelor24/Documents/Taylor 2018-19/lang-struct/A02\Antlr_action.g4 by ANTLR 4.7.2
import org.antlr.v4.runtime.tree.ParseTreeListener;

/**
 * This interface defines a complete listener for a parse tree produced by
 * {@link Antlr_actionParser}.
 */
public interface Antlr_actionListener extends ParseTreeListener {
	/**
	 * Enter a parse tree produced by {@link Antlr_actionParser#start}.
	 * @param ctx the parse tree
	 */
	void enterStart(Antlr_actionParser.StartContext ctx);
	/**
	 * Exit a parse tree produced by {@link Antlr_actionParser#start}.
	 * @param ctx the parse tree
	 */
	void exitStart(Antlr_actionParser.StartContext ctx);
	/**
	 * Enter a parse tree produced by {@link Antlr_actionParser#list}.
	 * @param ctx the parse tree
	 */
	void enterList(Antlr_actionParser.ListContext ctx);
	/**
	 * Exit a parse tree produced by {@link Antlr_actionParser#list}.
	 * @param ctx the parse tree
	 */
	void exitList(Antlr_actionParser.ListContext ctx);
	/**
	 * Enter a parse tree produced by {@link Antlr_actionParser#expr}.
	 * @param ctx the parse tree
	 */
	void enterExpr(Antlr_actionParser.ExprContext ctx);
	/**
	 * Exit a parse tree produced by {@link Antlr_actionParser#expr}.
	 * @param ctx the parse tree
	 */
	void exitExpr(Antlr_actionParser.ExprContext ctx);
	/**
	 * Enter a parse tree produced by {@link Antlr_actionParser#terms}.
	 * @param ctx the parse tree
	 */
	void enterTerms(Antlr_actionParser.TermsContext ctx);
	/**
	 * Exit a parse tree produced by {@link Antlr_actionParser#terms}.
	 * @param ctx the parse tree
	 */
	void exitTerms(Antlr_actionParser.TermsContext ctx);
	/**
	 * Enter a parse tree produced by {@link Antlr_actionParser#term}.
	 * @param ctx the parse tree
	 */
	void enterTerm(Antlr_actionParser.TermContext ctx);
	/**
	 * Exit a parse tree produced by {@link Antlr_actionParser#term}.
	 * @param ctx the parse tree
	 */
	void exitTerm(Antlr_actionParser.TermContext ctx);
	/**
	 * Enter a parse tree produced by {@link Antlr_actionParser#factors}.
	 * @param ctx the parse tree
	 */
	void enterFactors(Antlr_actionParser.FactorsContext ctx);
	/**
	 * Exit a parse tree produced by {@link Antlr_actionParser#factors}.
	 * @param ctx the parse tree
	 */
	void exitFactors(Antlr_actionParser.FactorsContext ctx);
	/**
	 * Enter a parse tree produced by {@link Antlr_actionParser#factor}.
	 * @param ctx the parse tree
	 */
	void enterFactor(Antlr_actionParser.FactorContext ctx);
	/**
	 * Exit a parse tree produced by {@link Antlr_actionParser#factor}.
	 * @param ctx the parse tree
	 */
	void exitFactor(Antlr_actionParser.FactorContext ctx);
}

--[ 2019.03.10.13.37.45.099.0 ]--
InitFile: /gen/Antlr_actionBaseVisitor.java
// Generated from C:/Users/bshelor24/Documents/Taylor 2018-19/lang-struct/A02\Antlr_action.g4 by ANTLR 4.7.2
import org.antlr.v4.runtime.tree.AbstractParseTreeVisitor;

/**
 * This class provides an empty implementation of {@link Antlr_actionVisitor},
 * which can be extended to create a visitor which only needs to handle a subset
 * of the available methods.
 *
 * @param <T> The return type of the visit operation. Use {@link Void} for
 * operations with no return type.
 */
public class Antlr_actionBaseVisitor<T> extends AbstractParseTreeVisitor<T> implements Antlr_actionVisitor<T> {
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitStart(Antlr_actionParser.StartContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitList(Antlr_actionParser.ListContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitExpr(Antlr_actionParser.ExprContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitTerms(Antlr_actionParser.TermsContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitTerm(Antlr_actionParser.TermContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitFactors(Antlr_actionParser.FactorsContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitFactor(Antlr_actionParser.FactorContext ctx) { return visitChildren(ctx); }
}

--[ 2019.03.10.13.37.45.102.0 ]--
InitFile: /gen/Antlr_actionBaseListener.java
// Generated from C:/Users/bshelor24/Documents/Taylor 2018-19/lang-struct/A02\Antlr_action.g4 by ANTLR 4.7.2

import org.antlr.v4.runtime.ParserRuleContext;
import org.antlr.v4.runtime.tree.ErrorNode;
import org.antlr.v4.runtime.tree.TerminalNode;

/**
 * This class provides an empty implementation of {@link Antlr_actionListener},
 * which can be extended to create a listener which only needs to handle a subset
 * of the available methods.
 */
public class Antlr_actionBaseListener implements Antlr_actionListener {
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation does nothing.</p>
	 */
	@Override public void enterStart(Antlr_actionParser.StartContext ctx) { }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation does nothing.</p>
	 */
	@Override public void exitStart(Antlr_actionParser.StartContext ctx) { }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation does nothing.</p>
	 */
	@Override public void enterList(Antlr_actionParser.ListContext ctx) { }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation does nothing.</p>
	 */
	@Override public void exitList(Antlr_actionParser.ListContext ctx) { }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation does nothing.</p>
	 */
	@Override public void enterExpr(Antlr_actionParser.ExprContext ctx) { }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation does nothing.</p>
	 */
	@Override public void exitExpr(Antlr_actionParser.ExprContext ctx) { }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation does nothing.</p>
	 */
	@Override public void enterTerms(Antlr_actionParser.TermsContext ctx) { }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation does nothing.</p>
	 */
	@Override public void exitTerms(Antlr_actionParser.TermsContext ctx) { }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation does nothing.</p>
	 */
	@Override public void enterTerm(Antlr_actionParser.TermContext ctx) { }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation does nothing.</p>
	 */
	@Override public void exitTerm(Antlr_actionParser.TermContext ctx) { }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation does nothing.</p>
	 */
	@Override public void enterFactors(Antlr_actionParser.FactorsContext ctx) { }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation does nothing.</p>
	 */
	@Override public void exitFactors(Antlr_actionParser.FactorsContext ctx) { }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation does nothing.</p>
	 */
	@Override public void enterFactor(Antlr_actionParser.FactorContext ctx) { }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation does nothing.</p>
	 */
	@Override public void exitFactor(Antlr_actionParser.FactorContext ctx) { }

	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation does nothing.</p>
	 */
	@Override public void enterEveryRule(ParserRuleContext ctx) { }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation does nothing.</p>
	 */
	@Override public void exitEveryRule(ParserRuleContext ctx) { }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation does nothing.</p>
	 */
	@Override public void visitTerminal(TerminalNode node) { }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation does nothing.</p>
	 */
	@Override public void visitErrorNode(ErrorNode node) { }
}

--[ 2019.03.10.13.38.37.619.0 ]--
:/Test.java
r 13         ha
--[ 2019.03.10.13.38.37.753.0 ]--
r 13         har
--[ 2019.03.10.13.38.37.996.0 ]--
r 13         harS
--[ 2019.03.10.13.38.38.295.0 ]--
r 13         har
--[ 2019.03.10.13.38.38.433.0 ]--
r 13         ha
--[ 2019.03.10.13.38.38.606.0 ]--
r 13         h
--[ 2019.03.10.13.38.39.229.0 ]--
r 13         harS
--[ 2019.03.10.13.38.39.613.0 ]--
r 13         
--[ 2019.03.10.13.38.40.035.0 ]--
r 13         ExprLexer lexer = new ExprLexer(input);
--[ 2019.03.10.13.38.42.478.0 ]--
+ 13         
--[ 2019.03.10.13.38.43.220.0 ]--
r 13         C
--[ 2019.03.10.13.38.43.337.0 ]--
r 13         Ch
--[ 2019.03.10.13.38.43.456.0 ]--
r 13         Cha
--[ 2019.03.10.13.38.43.551.0 ]--
r 13         Char
--[ 2019.03.10.13.38.44.340.0 ]--
r 13         CharS
--[ 2019.03.10.13.38.44.567.0 ]--
r 13         CharSt
--[ 2019.03.10.13.38.44.752.0 ]--
r 13         CharStr
--[ 2019.03.10.13.38.44.835.0 ]--
r 13         CharStre
--[ 2019.03.10.13.38.44.928.0 ]--
r 13         CharStrea
--[ 2019.03.10.13.38.45.052.0 ]--
r 13         CharStream
--[ 2019.03.10.13.38.45.150.0 ]--
r 13         CharStream 
--[ 2019.03.10.13.38.45.245.0 ]--
r 13         CharStream i
--[ 2019.03.10.13.38.45.355.0 ]--
r 13         CharStream in
--[ 2019.03.10.13.38.45.512.0 ]--
r 13         CharStream inp
--[ 2019.03.10.13.38.45.626.0 ]--
r 13         CharStream inpu
--[ 2019.03.10.13.38.45.749.0 ]--
r 13         CharStream input
--[ 2019.03.10.13.38.45.888.0 ]--
r 13         CharStream input 
--[ 2019.03.10.13.38.46.153.0 ]--
r 13         CharStream input =
--[ 2019.03.10.13.38.46.289.0 ]--
r 13         CharStream input = 
--[ 2019.03.10.13.38.47.152.0 ]--
r 13         CharStream input = C
--[ 2019.03.10.13.38.47.288.0 ]--
r 13         CharStream input = Ch
--[ 2019.03.10.13.38.47.334.0 ]--
r 13         CharStream input = Cha
--[ 2019.03.10.13.38.47.461.0 ]--
r 13         CharStream input = Char
--[ 2019.03.10.13.38.47.645.0 ]--
r 13         CharStream input = CharS
--[ 2019.03.10.13.38.47.755.0 ]--
r 13         CharStream input = CharSt
--[ 2019.03.10.13.38.47.908.0 ]--
r 13         CharStream input = CharStr
--[ 2019.03.10.13.38.48.002.0 ]--
r 13         CharStream input = CharStre
--[ 2019.03.10.13.38.48.085.0 ]--
r 13         CharStream input = CharStrea
--[ 2019.03.10.13.38.48.174.0 ]--
r 13         CharStream input = CharStream
--[ 2019.03.10.13.38.48.284.0 ]--
r 13         CharStream input = CharStreams
--[ 2019.03.10.13.38.48.547.0 ]--
r 13         CharStream input = CharStreams.
--[ 2019.03.10.13.38.48.941.0 ]--
r 13         CharStream input = CharStreams.f
--[ 2019.03.10.13.38.49.069.0 ]--
r 13         CharStream input = CharStreams.fr
--[ 2019.03.10.13.38.49.123.0 ]--
r 13         CharStream input = CharStreams.fro
--[ 2019.03.10.13.38.49.192.0 ]--
r 13         CharStream input = CharStreams.from
--[ 2019.03.10.13.38.49.428.0 ]--
r 13         CharStream input = CharStreams.fromF
--[ 2019.03.10.13.38.49.591.0 ]--
r 13         CharStream input = CharStreams.fromFi
--[ 2019.03.10.13.38.49.686.0 ]--
r 13         CharStream input = CharStreams.fromFil
--[ 2019.03.10.13.38.49.744.0 ]--
r 13         CharStream input = CharStreams.fromFile
--[ 2019.03.10.13.38.49.846.0 ]--
r 13         CharStream input = CharStreams.fromFileN
--[ 2019.03.10.13.38.49.962.0 ]--
r 13         CharStream input = CharStreams.fromFileNa
--[ 2019.03.10.13.38.50.048.0 ]--
r 13         CharStream input = CharStreams.fromFileNam
--[ 2019.03.10.13.38.50.160.0 ]--
r 13         CharStream input = CharStreams.fromFileName
--[ 2019.03.10.13.38.50.389.0 ]--
r 13         CharStream input = CharStreams.fromFileName()
--[ 2019.03.10.13.38.50.643.0 ]--
r 13         CharStream input = CharStreams.fromFileName(:)
--[ 2019.03.10.13.38.51.014.0 ]--
r 13         CharStream input = CharStreams.fromFileName(:i)
--[ 2019.03.10.13.38.51.149.0 ]--
r 13         CharStream input = CharStreams.fromFileName(:in)
--[ 2019.03.10.13.38.51.307.0 ]--
r 13         CharStream input = CharStreams.fromFileName(:inp)
--[ 2019.03.10.13.38.51.398.0 ]--
r 13         CharStream input = CharStreams.fromFileName(:inpu)
--[ 2019.03.10.13.38.51.497.0 ]--
r 13         CharStream input = CharStreams.fromFileName(:input)
--[ 2019.03.10.13.38.51.672.0 ]--
r 13         CharStream input = CharStreams.fromFileName(:inputs)
--[ 2019.03.10.13.38.52.153.0 ]--
r 13         CharStream input = CharStreams.fromFileName(:inputs/)
--[ 2019.03.10.13.38.52.276.0 ]--
r 13         CharStream input = CharStreams.fromFileName(:inputs/t)
--[ 2019.03.10.13.38.52.406.0 ]--
r 13         CharStream input = CharStreams.fromFileName(:inputs/te)
--[ 2019.03.10.13.38.52.594.0 ]--
r 13         CharStream input = CharStreams.fromFileName(:inputs/tex)
--[ 2019.03.10.13.38.53.031.0 ]--
r 13         CharStream input = CharStreams.fromFileName(:inputs/te)
--[ 2019.03.10.13.38.53.132.0 ]--
r 13         CharStream input = CharStreams.fromFileName(:inputs/tes)
--[ 2019.03.10.13.38.53.263.0 ]--
r 13         CharStream input = CharStreams.fromFileName(:inputs/test)
--[ 2019.03.10.13.38.53.471.0 ]--
r 13         CharStream input = CharStreams.fromFileName(:inputs/test/)
--[ 2019.03.10.13.38.53.610.0 ]--
r 13         CharStream input = CharStreams.fromFileName(:inputs/test/t)
--[ 2019.03.10.13.38.53.809.0 ]--
r 13         CharStream input = CharStreams.fromFileName(:inputs/test/)
--[ 2019.03.10.13.38.53.968.0 ]--
r 13         CharStream input = CharStreams.fromFileName(:inputs/test/.)
--[ 2019.03.10.13.38.54.092.0 ]--
r 13         CharStream input = CharStreams.fromFileName(:inputs/test/.t)
--[ 2019.03.10.13.38.54.329.0 ]--
r 13         CharStream input = CharStreams.fromFileName(:inputs/test/.tx)
--[ 2019.03.10.13.38.54.586.0 ]--
r 13         CharStream input = CharStreams.fromFileName(:inputs/test/.txt)
--[ 2019.03.10.13.38.55.549.0 ]--
r 13         CharStream input = CharStreams.fromFileName(:inputs/test/.txt"")
--[ 2019.03.10.13.38.57.980.0 ]--
r 13         CharStream input = CharStreams.fromFileName(:inputs/test/.txt")
--[ 2019.03.10.13.39.00.517.0 ]--
r 13         CharStream input = CharStreams.fromFileName(inputs/test/.txt")
--[ 2019.03.10.13.39.00.931.0 ]--
r 13         CharStream input = CharStreams.fromFileName(:inputs/test/.txt")
--[ 2019.03.10.13.39.02.361.0 ]--
r 13         CharStream input = CharStreams.fromFileName(:inputs/test/.txt");
--[ 2019.03.10.13.39.04.844.0 ]--
r 13         CharStream input = CharStreams.fromFileName(inputs/test/.txt");
--[ 2019.03.10.13.39.05.314.0 ]--
r 13         CharStream input = CharStreams.fromFileName("inputs/test/.txt");
--[ 2019.03.10.13.39.11.522.0 ]--
r 13         CharStream input = CharStreams.fromFileName("inputs/test.txt");
--[ 2019.03.10.13.39.21.183.0 ]--
r 11 //        FileInputStream inputstream = new FileInputStream("inputs/test.txt");
r 12 //        ANTLRInputStream input = new ANTLRInputStream(inputstream);
--[ 2019.03.10.13.39.27.864.0 ]--
+ 14         
--[ 2019.03.10.13.39.29.795.0 ]--
- 14
--[ 2019.03.10.13.39.29.994.0 ]--
r 13         CharStream input = CharStreams.fromFileName("inputs/test.txt")
--[ 2019.03.10.13.39.31.174.0 ]--
r 13         CharStream input = CharStreams.fromFileName("inputs/test.txt");
--[ 2019.03.10.13.39.55.987.0 ]--
+ 16         
--[ 2019.03.10.13.39.56.981.0 ]--
r 16         l
--[ 2019.03.10.13.39.57.060.0 ]--
r 16         lkj
--[ 2019.03.10.13.39.57.114.0 ]--
r 16         lkja
--[ 2019.03.10.13.39.57.149.0 ]--
r 16         lkjas
--[ 2019.03.10.13.39.57.189.0 ]--
r 16         lkjasd
--[ 2019.03.10.13.39.57.262.0 ]--
r 16         lkjasdf
--[ 2019.03.10.13.39.57.600.0 ]--
r 16         lkjasd
--[ 2019.03.10.13.39.57.770.0 ]--
r 16         lkjas
--[ 2019.03.10.13.39.57.912.0 ]--
r 16         lkja
--[ 2019.03.10.13.39.58.077.0 ]--
r 16         lkj
--[ 2019.03.10.13.39.58.229.0 ]--
r 16         lk
--[ 2019.03.10.13.39.58.391.0 ]--
r 16         l
--[ 2019.03.10.13.39.58.613.0 ]--
r 16         
--[ 2019.03.10.13.40.01.907.0 ]--
r 16         l
--[ 2019.03.10.13.40.02.108.0 ]--
r 16         lka
--[ 2019.03.10.13.40.02.180.0 ]--
r 16         lkajsdf
--[ 2019.03.10.13.40.02.788.0 ]--
r 16         lkajsd
--[ 2019.03.10.13.40.02.955.0 ]--
r 16         lkajs
--[ 2019.03.10.13.40.03.142.0 ]--
r 16         lkaj
--[ 2019.03.10.13.40.03.330.0 ]--
r 16         lka
--[ 2019.03.10.13.40.03.498.0 ]--
r 16         lk
--[ 2019.03.10.13.40.03.719.0 ]--
r 16         l
--[ 2019.03.10.13.40.04.098.0 ]--
r 16         
--[ 2019.03.10.13.40.11.351.0 ]--
r 16         L
--[ 2019.03.10.13.40.11.496.0 ]--
r 16         Li
--[ 2019.03.10.13.40.11.576.0 ]--
r 16         Lis
--[ 2019.03.10.13.40.11.769.0 ]--
r 16         List
--[ 2019.03.10.13.40.11.859.0 ]--
r 16         Liste
--[ 2019.03.10.13.40.11.958.0 ]--
r 16         Listen
--[ 2019.03.10.13.40.12.103.0 ]--
r 16         Listene
--[ 2019.03.10.13.40.12.223.0 ]--
r 16         Listener
--[ 2019.03.10.13.40.13.724.0 ]--
r 16         ListenerB
--[ 2019.03.10.13.40.13.959.0 ]--
r 16         ListenerBs
--[ 2019.03.10.13.40.14.457.0 ]--
r 16         ListenerB
--[ 2019.03.10.13.40.14.550.0 ]--
r 16         ListenerBa
--[ 2019.03.10.13.40.14.643.0 ]--
r 16         ListenerBas
--[ 2019.03.10.13.40.14.724.0 ]--
r 16         ListenerBase
--[ 2019.03.10.13.40.14.993.0 ]--
r 16         ListenerBaseL
--[ 2019.03.10.13.40.15.108.0 ]--
r 16         ListenerBaseLi
--[ 2019.03.10.13.40.15.175.0 ]--
r 16         ListenerBaseLis
--[ 2019.03.10.13.40.15.251.0 ]--
r 16         ListenerBaseList
--[ 2019.03.10.13.40.15.357.0 ]--
r 16         ListenerBaseListe
--[ 2019.03.10.13.40.15.481.0 ]--
r 16         ListenerBaseListen
--[ 2019.03.10.13.40.15.614.0 ]--
r 16         ListenerBaseListene
--[ 2019.03.10.13.40.15.679.0 ]--
r 16         ListenerBaseListener
--[ 2019.03.10.13.40.16.587.0 ]--
r 16         ListenerBaseListener 
--[ 2019.03.10.13.40.16.678.0 ]--
r 16         ListenerBaseListener l
--[ 2019.03.10.13.40.16.803.0 ]--
r 16         ListenerBaseListener lis
--[ 2019.03.10.13.40.17.021.0 ]--
r 16         ListenerBaseListener list
--[ 2019.03.10.13.40.17.120.0 ]--
r 16         ListenerBaseListener liste
--[ 2019.03.10.13.40.17.243.0 ]--
r 16         ListenerBaseListener listen
--[ 2019.03.10.13.40.17.352.0 ]--
r 16         ListenerBaseListener listene
--[ 2019.03.10.13.40.17.434.0 ]--
r 16         ListenerBaseListener listener
--[ 2019.03.10.13.40.17.935.0 ]--
r 16         ListenerBaseListener listener 
--[ 2019.03.10.13.40.18.053.0 ]--
r 16         ListenerBaseListener listener =
--[ 2019.03.10.13.40.18.144.0 ]--
r 16         ListenerBaseListener listener = 
--[ 2019.03.10.13.40.20.706.0 ]--
r 16         ListenerBaseListener listener = n
--[ 2019.03.10.13.40.20.823.0 ]--
r 16         ListenerBaseListener listener = new
--[ 2019.03.10.13.40.21.316.0 ]--
r 16         ListenerBaseListener listener = new 
--[ 2019.03.10.13.40.21.620.0 ]--
r 16         ListenerBaseListener listener = new L
--[ 2019.03.10.13.40.21.748.0 ]--
r 16         ListenerBaseListener listener = new Li
--[ 2019.03.10.13.40.21.861.0 ]--
r 16         ListenerBaseListener listener = new Lis
--[ 2019.03.10.13.40.21.948.0 ]--
r 16         ListenerBaseListener listener = new List
--[ 2019.03.10.13.40.22.052.0 ]--
r 16         ListenerBaseListener listener = new Liste
--[ 2019.03.10.13.40.22.181.0 ]--
r 16         ListenerBaseListener listener = new Lister
--[ 2019.03.10.13.40.22.363.0 ]--
r 16         ListenerBaseListener listener = new Listern
--[ 2019.03.10.13.40.22.654.0 ]--
r 16         ListenerBaseListener listener = new Lister
--[ 2019.03.10.13.40.22.837.0 ]--
r 16         ListenerBaseListener listener = new Liste
--[ 2019.03.10.13.40.22.904.0 ]--
r 16         ListenerBaseListener listener = new Listen
--[ 2019.03.10.13.40.22.969.0 ]--
r 16         ListenerBaseListener listener = new Listene
--[ 2019.03.10.13.40.23.048.0 ]--
r 16         ListenerBaseListener listener = new Listener
--[ 2019.03.10.13.40.23.401.0 ]--
r 16         ListenerBaseListener listener = new ListenerB
--[ 2019.03.10.13.40.23.541.0 ]--
r 16         ListenerBaseListener listener = new ListenerBa
--[ 2019.03.10.13.40.23.643.0 ]--
r 16         ListenerBaseListener listener = new ListenerBas
--[ 2019.03.10.13.40.23.744.0 ]--
r 16         ListenerBaseListener listener = new ListenerBase
--[ 2019.03.10.13.40.24.002.0 ]--
r 16         ListenerBaseListener listener = new ListenerBaseL
--[ 2019.03.10.13.40.24.143.0 ]--
r 16         ListenerBaseListener listener = new ListenerBaseLi
--[ 2019.03.10.13.40.24.227.0 ]--
r 16         ListenerBaseListener listener = new ListenerBaseLis
--[ 2019.03.10.13.40.24.331.0 ]--
r 16         ListenerBaseListener listener = new ListenerBaseList
--[ 2019.03.10.13.40.24.440.0 ]--
r 16         ListenerBaseListener listener = new ListenerBaseListe
--[ 2019.03.10.13.40.24.548.0 ]--
r 16         ListenerBaseListener listener = new ListenerBaseListen
--[ 2019.03.10.13.40.24.645.0 ]--
r 16         ListenerBaseListener listener = new ListenerBaseListene
--[ 2019.03.10.13.40.24.717.0 ]--
r 16         ListenerBaseListener listener = new ListenerBaseListener
--[ 2019.03.10.13.40.25.067.0 ]--
r 16         ListenerBaseListener listener = new ListenerBaseListener()
--[ 2019.03.10.13.40.25.634.0 ]--
r 16         ListenerBaseListener listener = new ListenerBaseListener();
--[ 2019.03.10.13.41.46.657.0 ]--
UpdateTree (AD): 1 1
- /Antlr_action.g4
+ /AntlrActions.g4

--[ 2019.03.10.13.41.46.660.0 ]--
InitFile: /AntlrActions.g4
grammar Antlr_action;

start : list 'EOF';
list : expr ';' list | ;
expr : term terms;
terms : '+' term terms | '-' term terms | ;
term : factor factors;
factors : '*' factor factors | '/' factor factors | 'MOD' factor factors | ;
factor : '(' expr ')' | ID | NUM;

ID : [A-Za-z]([A-Za-z] | [0-9])*;
NUM : [0-9]([0-9])*;

--[ 2019.03.10.13.41.46.680.0 ]--
:/gen/Antlr_actionLexer.java
r 89 	public String getGrammarFileName() { return "AntlrActions.g4"; }
--[ 2019.03.10.13.41.46.721.0 ]--
:/gen/Antlr_actionParser.java
r 77 	public String getGrammarFileName() { return "AntlrActions.g4"; }
--[ 2019.03.10.13.42.32.459.0 ]--
:/Test.java
r 13         CharStream input = CharStreams.fromFileName("input/test.txt");
--[ 2019.03.10.13.42.32.629.0 ]--
r 13         CharStream input = CharStreams.fromFileName("inpu/test.txt");
--[ 2019.03.10.13.42.32.784.0 ]--
r 13         CharStream input = CharStreams.fromFileName("inp/test.txt");
--[ 2019.03.10.13.42.32.953.0 ]--
r 13         CharStream input = CharStreams.fromFileName("in/test.txt");
--[ 2019.03.10.13.42.33.129.0 ]--
r 13         CharStream input = CharStreams.fromFileName("i/test.txt");
--[ 2019.03.10.13.42.33.374.0 ]--
r 13         CharStream input = CharStreams.fromFileName("/test.txt");
--[ 2019.03.10.13.42.35.294.0 ]--
r 13         CharStream input = CharStreams.fromFileName("test.txt");
--[ 2019.03.10.13.42.36.792.0 ]--
r 13         CharStream input = CharStreams.fromFileName(".test.txt");
--[ 2019.03.10.13.42.36.839.0 ]--
r 13         CharStream input = CharStreams.fromFileName("./test.txt");
--[ 2019.03.10.13.42.39.832.0 ]--
r 13         CharStream input = CharStreams.fromFileName("./tes.txt");
--[ 2019.03.10.13.42.40.027.0 ]--
r 13         CharStream input = CharStreams.fromFileName("./te.txt");
--[ 2019.03.10.13.42.40.169.0 ]--
r 13         CharStream input = CharStreams.fromFileName("./t.txt");
--[ 2019.03.10.13.42.40.343.0 ]--
r 13         CharStream input = CharStreams.fromFileName("./.txt");
--[ 2019.03.10.13.42.41.773.0 ]--
r 13         CharStream input = CharStreams.fromFileName("./r.txt");
--[ 2019.03.10.13.42.41.904.0 ]--
r 13         CharStream input = CharStreams.fromFileName("./re.txt");
--[ 2019.03.10.13.42.42.322.0 ]--
r 13         CharStream input = CharStreams.fromFileName("./r.txt");
--[ 2019.03.10.13.42.42.440.0 ]--
r 13         CharStream input = CharStreams.fromFileName("./rd.txt");
--[ 2019.03.10.13.42.42.518.0 ]--
r 13         CharStream input = CharStreams.fromFileName("./rdp.txt");
--[ 2019.03.10.13.42.43.210.0 ]--
r 13         CharStream input = CharStreams.fromFileName("./rdp_.txt");
--[ 2019.03.10.13.42.43.515.0 ]--
r 13         CharStream input = CharStreams.fromFileName("./rdp_i.txt");
--[ 2019.03.10.13.42.43.642.0 ]--
r 13         CharStream input = CharStreams.fromFileName("./rdp_in.txt");
--[ 2019.03.10.13.42.43.796.0 ]--
r 13         CharStream input = CharStreams.fromFileName("./rdp_inp.txt");
--[ 2019.03.10.13.42.43.940.0 ]--
r 13         CharStream input = CharStreams.fromFileName("./rdp_inpu.txt");
--[ 2019.03.10.13.42.44.072.0 ]--
r 13         CharStream input = CharStreams.fromFileName("./rdp_input.txt");
--[ 2019.03.10.13.42.48.858.0 ]--
r 13         CharStream input = CharStreams.fromFileName("./rdpinput.txt");
--[ 2019.03.10.13.42.49.001.0 ]--
r 13         CharStream input = CharStreams.fromFileName("./rdinput.txt");
--[ 2019.03.10.13.42.49.181.0 ]--
r 13         CharStream input = CharStreams.fromFileName("./rinput.txt");
--[ 2019.03.10.13.42.49.396.0 ]--
r 13         CharStream input = CharStreams.fromFileName("./input.txt");
--[ 2019.03.10.13.43.34.421.0 ]--
r 16         LnistenerBaseListener listener = new ListenerBaseListener();
--[ 2019.03.10.13.43.34.442.0 ]--
UpdateTree (AD): 1 1
- /rdp_input.txt
+ /input.txt

--[ 2019.03.10.13.43.34.444.0 ]--
InitFile: /input.txt
2 + 43 * AB;  4 + f;
    8 * 5 + ty6 / (7 MOD
    3); 4*5MOD; EOF

--[ 2019.03.10.13.43.34.644.0 ]--
r 16         LntistenerBaseListener listener = new ListenerBaseListener();
--[ 2019.03.10.13.43.35.081.0 ]--
r 16         LnistenerBaseListener listener = new ListenerBaseListener();
--[ 2019.03.10.13.43.35.231.0 ]--
r 16         ListenerBaseListener listener = new ListenerBaseListener();
--[ 2019.03.10.13.43.35.536.0 ]--
r 16         istenerBaseListener listener = new ListenerBaseListener();
--[ 2019.03.10.13.43.35.882.0 ]--
r 16         AistenerBaseListener listener = new ListenerBaseListener();
--[ 2019.03.10.13.43.37.155.0 ]--
r 16         AnistenerBaseListener listener = new ListenerBaseListener();
--[ 2019.03.10.13.43.37.825.0 ]--
r 16         AntistenerBaseListener listener = new ListenerBaseListener();
--[ 2019.03.10.13.43.37.972.0 ]--
r 16         AntlistenerBaseListener listener = new ListenerBaseListener();
--[ 2019.03.10.13.43.38.074.0 ]--
r 16         AntlristenerBaseListener listener = new ListenerBaseListener();
--[ 2019.03.10.13.43.39.383.0 ]--
r 16         AntlrAistenerBaseListener listener = new ListenerBaseListener();
--[ 2019.03.10.13.43.39.561.0 ]--
r 16         AntlrAcistenerBaseListener listener = new ListenerBaseListener();
--[ 2019.03.10.13.43.39.863.0 ]--
r 16         AntlrActistenerBaseListener listener = new ListenerBaseListener();
--[ 2019.03.10.13.43.39.953.0 ]--
r 16         AntlrActiistenerBaseListener listener = new ListenerBaseListener();
--[ 2019.03.10.13.43.40.054.0 ]--
r 16         AntlrActioistenerBaseListener listener = new ListenerBaseListener();
--[ 2019.03.10.13.43.40.157.0 ]--
r 16         AntlrActionistenerBaseListener listener = new ListenerBaseListener();
--[ 2019.03.10.13.43.40.239.0 ]--
r 16         AntlrActionsistenerBaseListener listener = new ListenerBaseListener();
--[ 2019.03.10.13.43.42.739.0 ]--
r 16         AntlrActionsListenerBaseListener listener = new ListenerBaseListener();
--[ 2019.03.10.13.45.02.375.0 ]--
r 16         AntlrActionsListenerBaseListener listener = new AntlrActionsBaseListener();
--[ 2019.03.10.13.45.10.035.0 ]--
r 17         AntlrActionsParser parser = new ExprParser(tokens);
--[ 2019.03.10.13.45.13.517.0 ]--
r 17         AntlrActionsParser parser = new AntlrActionsParser(tokens);
--[ 2019.03.10.13.45.34.338.0 ]--
r 14         AntlrActionsLexer lexer = new ExprLexer(input);
--[ 2019.03.10.13.45.37.965.0 ]--
r 14         AntlrActionsLexer lexer = new AntlrActionsLexer(input);
--[ 2019.03.10.13.46.12.699.0 ]--
+ 8 
--[ 2019.03.10.13.46.12.930.0 ]--
+ 8 
--[ 2019.03.10.13.46.13.725.0 ]--
r 9 i
--[ 2019.03.10.13.46.13.909.0 ]--
r 9 ip
--[ 2019.03.10.13.46.13.996.0 ]--
r 9 ipm
--[ 2019.03.10.13.46.14.089.0 ]--
r 9 ipmo
--[ 2019.03.10.13.46.14.201.0 ]--
r 9 ipmor
--[ 2019.03.10.13.46.14.397.0 ]--
r 9 ipmort
--[ 2019.03.10.13.46.14.510.0 ]--
r 9 ipmort 
--[ 2019.03.10.13.46.14.617.0 ]--
r 9 ipmort r
--[ 2019.03.10.13.46.15.041.0 ]--
r 9 ipmort 
--[ 2019.03.10.13.46.15.148.0 ]--
r 9 ipmort
--[ 2019.03.10.13.46.15.301.0 ]--
r 9 ipmor
--[ 2019.03.10.13.46.15.469.0 ]--
r 9 ipmo
--[ 2019.03.10.13.46.15.638.0 ]--
r 9 ipm
--[ 2019.03.10.13.46.15.783.0 ]--
r 9 ip
--[ 2019.03.10.13.46.15.939.0 ]--
r 9 i
--[ 2019.03.10.13.46.16.102.0 ]--
r 9 im
--[ 2019.03.10.13.46.16.202.0 ]--
r 9 imp
--[ 2019.03.10.13.46.16.382.0 ]--
r 9 impo
--[ 2019.03.10.13.46.16.457.0 ]--
r 9 impor
--[ 2019.03.10.13.46.16.624.0 ]--
r 9 import
--[ 2019.03.10.13.46.16.708.0 ]--
r 9 import 
--[ 2019.03.10.13.46.16.797.0 ]--
r 9 import r
--[ 2019.03.10.13.46.16.903.0 ]--
r 9 import ru
--[ 2019.03.10.13.46.17.070.0 ]--
r 9 import run
--[ 2019.03.10.13.46.17.626.0 ]--
r 9 import runt
--[ 2019.03.10.13.46.17.738.0 ]--
r 9 import runti
--[ 2019.03.10.13.46.17.821.0 ]--
r 9 import runtim
--[ 2019.03.10.13.46.17.875.0 ]--
r 9 import runtime
--[ 2019.03.10.13.46.21.219.0 ]--
r 9 import runtime.
--[ 2019.03.10.13.46.22.249.0 ]--
r 9 import runtime.*
--[ 2019.03.10.13.46.24.496.0 ]--
r 9 import oruntime.*
--[ 2019.03.10.13.46.24.542.0 ]--
r 9 import orruntime.*
--[ 2019.03.10.13.46.24.743.0 ]--
r 9 import orgruntime.*
--[ 2019.03.10.13.46.25.301.0 ]--
r 9 import org.runtime.*
--[ 2019.03.10.13.46.25.659.0 ]--
r 9 import org.aruntime.*
--[ 2019.03.10.13.46.25.729.0 ]--
r 9 import org.anruntime.*
--[ 2019.03.10.13.46.25.827.0 ]--
r 9 import org.antruntime.*
--[ 2019.03.10.13.46.25.928.0 ]--
r 9 import org.antlruntime.*
--[ 2019.03.10.13.46.26.044.0 ]--
r 9 import org.antlrruntime.*
--[ 2019.03.10.13.46.27.287.0 ]--
r 9 import org.antlr.runtime.*
--[ 2019.03.10.13.46.27.394.0 ]--
r 9 import org.antlr.vruntime.*
--[ 2019.03.10.13.46.28.133.0 ]--
r 9 import org.antlr.v4runtime.*
--[ 2019.03.10.13.46.29.104.0 ]--
r 9 import org.antlr.v4.runtime.*
--[ 2019.03.10.13.46.31.717.0 ]--
r 9 import org.antlr.v4.runtime.*;
--[ 2019.03.10.13.46.41.452.0 ]--
r 9 
--[ 2019.03.10.13.46.44.461.0 ]--
- 8
--[ 2019.03.10.13.46.44.871.0 ]--
- 8
--[ 2019.03.10.13.46.50.013.0 ]--
+ 4 import org.antlr.v4.runtime.tree.Err
r 5 orNode;
--[ 2019.03.10.13.46.50.076.0 ]--
- 7
--[ 2019.03.10.13.46.55.906.0 ]--
r 6 import org.antlr.v4.runtime.tree.TerminalNode
--[ 2019.03.10.13.46.56.400.0 ]--
r 6 import org.antlr.v4.runtime.tree.TerminalNod
--[ 2019.03.10.13.46.56.435.0 ]--
r 6 import org.antlr.v4.runtime.tree.TerminalNo
--[ 2019.03.10.13.46.56.465.0 ]--
r 6 import org.antlr.v4.runtime.tree.TerminalN
--[ 2019.03.10.13.46.56.496.0 ]--
r 6 import org.antlr.v4.runtime.tree.Terminal
--[ 2019.03.10.13.46.56.554.0 ]--
r 6 import org.antlr.v4.runtime.tree.Termina
--[ 2019.03.10.13.46.56.583.0 ]--
r 6 import org.antlr.v4.runtime.tree.Termin
--[ 2019.03.10.13.46.56.625.0 ]--
r 6 import org.antlr.v4.runtime.tree.Termi
--[ 2019.03.10.13.46.56.664.0 ]--
r 6 import org.antlr.v4.runtime.tree.Ter
--[ 2019.03.10.13.46.56.720.0 ]--
r 6 import org.antlr.v4.runtime.tree.Te
--[ 2019.03.10.13.46.56.753.0 ]--
r 6 import org.antlr.v4.runtime.tree.T
--[ 2019.03.10.13.46.56.788.0 ]--
r 6 import org.antlr.v4.runtime.tree.
--[ 2019.03.10.13.46.56.838.0 ]--
r 6 import org.antlr.v4.runtime.tree
--[ 2019.03.10.13.46.56.894.0 ]--
r 6 import org.antlr.v4.runtime.t
--[ 2019.03.10.13.46.56.922.0 ]--
r 6 import org.antlr.v4.runtime.
--[ 2019.03.10.13.46.56.981.0 ]--
r 6 import org.antlr.v4.runtim
--[ 2019.03.10.13.46.57.031.0 ]--
r 6 import org.antlr.v4.runti
--[ 2019.03.10.13.46.57.062.0 ]--
r 6 import org.antlr.v4.runt
--[ 2019.03.10.13.46.57.091.0 ]--
r 6 import org.antlr.v4.run
--[ 2019.03.10.13.46.57.128.0 ]--
r 6 import org.antlr.v4.ru
--[ 2019.03.10.13.46.57.157.0 ]--
r 6 import org.antlr.v4.r
--[ 2019.03.10.13.46.57.215.0 ]--
r 6 import org.antlr.v4.
--[ 2019.03.10.13.46.57.272.0 ]--
r 6 import org.antlr.v4
--[ 2019.03.10.13.46.57.311.0 ]--
r 6 import org.antlr.
--[ 2019.03.10.13.46.57.368.0 ]--
r 6 import org.ant
--[ 2019.03.10.13.46.57.426.0 ]--
r 6 import org.a
--[ 2019.03.10.13.46.57.476.0 ]--
r 6 import org.
--[ 2019.03.10.13.46.57.539.0 ]--
r 6 import or
--[ 2019.03.10.13.46.57.592.0 ]--
r 6 import o
--[ 2019.03.10.13.46.57.637.0 ]--
r 6 import 
--[ 2019.03.10.13.46.57.684.0 ]--
r 6 impo
--[ 2019.03.10.13.46.57.743.0 ]--
r 6 imp
--[ 2019.03.10.13.46.57.770.0 ]--
r 6 im
--[ 2019.03.10.13.46.57.809.0 ]--
r 6 
--[ 2019.03.10.13.46.57.866.0 ]--
- 6
--[ 2019.03.10.13.46.57.903.0 ]--
r 5 orNod
--[ 2019.03.10.13.46.58.810.0 ]--
r 5 orNodd
--[ 2019.03.10.13.46.58.945.0 ]--
r 5 orNoddd
--[ 2019.03.10.13.46.59.733.0 ]--
r 5 orNodd
--[ 2019.03.10.13.47.00.219.0 ]--
r 5 orNod
--[ 2019.03.10.13.47.00.255.0 ]--
r 5 orNo
--[ 2019.03.10.13.47.00.293.0 ]--
r 5 orN
--[ 2019.03.10.13.47.00.330.0 ]--
r 5 or
--[ 2019.03.10.13.47.00.376.0 ]--
r 5 o
--[ 2019.03.10.13.47.00.427.0 ]--
r 5 
--[ 2019.03.10.13.47.00.481.0 ]--
- 5
--[ 2019.03.10.13.47.00.532.0 ]--
r 4 import org.antlr.v4.runtime.tree.
--[ 2019.03.10.13.47.00.601.0 ]--
r 4 import org.antlr.v4.runtime.tre
--[ 2019.03.10.13.47.00.678.0 ]--
r 4 import org.antlr.v4.runtime.
--[ 2019.03.10.13.47.00.746.0 ]--
r 4 import org.antlr.v4.runtim
--[ 2019.03.10.13.47.00.807.0 ]--
r 4 import org.antlr.v4.runt
--[ 2019.03.10.13.47.00.843.0 ]--
r 4 import org.antlr.v4.run
--[ 2019.03.10.13.47.00.879.0 ]--
r 4 import org.antlr.v4.ru
--[ 2019.03.10.13.47.00.914.0 ]--
r 4 import org.antlr.v4.r
--[ 2019.03.10.13.47.00.953.0 ]--
r 4 import org.antlr.v4.
--[ 2019.03.10.13.47.01.026.0 ]--
r 4 import org.antlr.
--[ 2019.03.10.13.47.01.065.0 ]--
r 4 import org.antlr
--[ 2019.03.10.13.47.01.115.0 ]--
r 4 import org.antl
--[ 2019.03.10.13.47.01.151.0 ]--
r 4 import org.an
--[ 2019.03.10.13.47.01.183.0 ]--
r 4 import org.a
--[ 2019.03.10.13.47.01.216.0 ]--
r 4 import org.
--[ 2019.03.10.13.47.01.274.0 ]--
r 4 import or
--[ 2019.03.10.13.47.01.331.0 ]--
r 4 import 
--[ 2019.03.10.13.47.01.373.0 ]--
r 4 import
--[ 2019.03.10.13.47.01.413.0 ]--
r 4 impor
--[ 2019.03.10.13.47.01.466.0 ]--
r 4 impo
--[ 2019.03.10.13.47.01.503.0 ]--
r 4 im
--[ 2019.03.10.13.47.01.534.0 ]--
r 4 i
--[ 2019.03.10.13.47.01.579.0 ]--
r 4 
--[ 2019.03.10.13.47.01.631.0 ]--
- 4
--[ 2019.03.10.13.47.01.681.0 ]--
r 3 import org.antlr.v4.runtime.ParserRuleContex
--[ 2019.03.10.13.47.01.724.0 ]--
r 3 import org.antlr.v4.runtime.ParserRuleCont
--[ 2019.03.10.13.47.01.754.0 ]--
r 3 import org.antlr.v4.runtime.ParserRuleCon
--[ 2019.03.10.13.47.01.787.0 ]--
r 3 import org.antlr.v4.runtime.ParserRuleCo
--[ 2019.03.10.13.47.01.818.0 ]--
r 3 import org.antlr.v4.runtime.ParserRuleC
--[ 2019.03.10.13.47.02.120.0 ]--
r 3 import org.antlr.v4.runtime.ParserRule
--[ 2019.03.10.13.47.02.212.0 ]--
r 3 import org.antlr.v4.runtime.ParserRul
--[ 2019.03.10.13.47.02.298.0 ]--
r 3 import org.antlr.v4.runtime.Pa
--[ 2019.03.10.13.47.02.363.0 ]--
r 3 import org.antlr.v4.runtim
--[ 2019.03.10.13.47.02.419.0 ]--
r 3 import org.antlr.v4.runt
--[ 2019.03.10.13.47.02.500.0 ]--
r 3 import org.antlr.v4.
--[ 2019.03.10.13.47.02.571.0 ]--
r 3 import org.antlr.v4
--[ 2019.03.10.13.47.02.630.0 ]--
r 3 import org.antlr.
--[ 2019.03.10.13.47.02.702.0 ]--
r 3 import org.an
--[ 2019.03.10.13.47.02.760.0 ]--
r 3 import org.
--[ 2019.03.10.13.47.02.818.0 ]--
r 3 import org
--[ 2019.03.10.13.47.02.868.0 ]--
r 3 import o
--[ 2019.03.10.13.47.02.903.0 ]--
r 3 import 
--[ 2019.03.10.13.47.02.951.0 ]--
r 3 impor
--[ 2019.03.10.13.47.03.000.0 ]--
r 3 impo
--[ 2019.03.10.13.47.03.050.0 ]--
r 3 im
--[ 2019.03.10.13.47.03.084.0 ]--
r 3 i
--[ 2019.03.10.13.47.03.118.0 ]--
r 3 
--[ 2019.03.10.13.47.03.215.0 ]--
- 2
r 2 import org.antlr.v4.runtime.ANTLRInputStrea
--[ 2019.03.10.13.47.03.278.0 ]--
r 2 import org.antlr.v4.runtime.ANTLRInputStr
--[ 2019.03.10.13.47.03.316.0 ]--
r 2 import org.antlr.v4.runtime.ANTLRInputSt
--[ 2019.03.10.13.47.03.366.0 ]--
r 2 import org.antlr.v4.runtime.ANTLRInputS
--[ 2019.03.10.13.47.03.403.0 ]--
r 2 import org.antlr.v4.runtime.ANTLRInpu
--[ 2019.03.10.13.47.03.440.0 ]--
r 2 import org.antlr.v4.runtime.ANTLRInp
--[ 2019.03.10.13.47.03.512.0 ]--
r 2 import org.antlr.v4.runtime.ANTLRIn
--[ 2019.03.10.13.47.03.547.0 ]--
r 2 import org.antlr.v4.runtime.ANTLR
--[ 2019.03.10.13.47.03.576.0 ]--
r 2 import org.antlr.v4.runtime.ANTL
--[ 2019.03.10.13.47.03.609.0 ]--
r 2 import org.antlr.v4.runtime.ANT
--[ 2019.03.10.13.47.03.638.0 ]--
r 2 import org.antlr.v4.runtime.AN
--[ 2019.03.10.13.47.03.667.0 ]--
r 2 import org.antlr.v4.runtime.A
--[ 2019.03.10.13.47.03.696.0 ]--
r 2 import org.antlr.v4.runtime.
--[ 2019.03.10.13.47.03.746.0 ]--
r 2 import org.antlr.v4.runtim
--[ 2019.03.10.13.47.03.795.0 ]--
r 2 import org.antlr.v4.runti
--[ 2019.03.10.13.47.03.823.0 ]--
r 2 import org.antlr.v4.runt
--[ 2019.03.10.13.47.03.851.0 ]--
r 2 import org.antlr.v4.run
--[ 2019.03.10.13.47.03.879.0 ]--
r 2 import org.antlr.v4.ru
--[ 2019.03.10.13.47.03.907.0 ]--
r 2 import org.antlr.v4.r
--[ 2019.03.10.13.47.03.943.0 ]--
r 2 import org.antlr.v4.
--[ 2019.03.10.13.47.04.011.0 ]--
r 2 import org.antlr.v
--[ 2019.03.10.13.47.04.075.0 ]--
r 2 import org.antlr
--[ 2019.03.10.13.47.04.123.0 ]--
r 2 import org.ant
--[ 2019.03.10.13.47.04.164.0 ]--
r 2 import org.an
--[ 2019.03.10.13.47.04.198.0 ]--
r 2 import org.a
--[ 2019.03.10.13.47.04.229.0 ]--
r 2 import org.
--[ 2019.03.10.13.47.04.309.0 ]--
r 2 import or
--[ 2019.03.10.13.47.04.370.0 ]--
r 2 import 
--[ 2019.03.10.13.47.04.411.0 ]--
r 2 impor
--[ 2019.03.10.13.47.04.458.0 ]--
r 2 impo
--[ 2019.03.10.13.47.04.498.0 ]--
r 2 im
--[ 2019.03.10.13.47.04.527.0 ]--
r 2 i
--[ 2019.03.10.13.47.04.565.0 ]--
r 2 
--[ 2019.03.10.13.47.04.621.0 ]--
- 2
--[ 2019.03.10.13.47.04.656.0 ]--
r 1 import org.antlr.v4.runtime.CommonTokenStream
--[ 2019.03.10.13.47.04.707.0 ]--
r 1 import org.antlr.v4.runtime.CommonTokenStre
--[ 2019.03.10.13.47.04.742.0 ]--
r 1 import org.antlr.v4.runtime.CommonTokenStr
--[ 2019.03.10.13.47.04.778.0 ]--
r 1 import org.antlr.v4.runtime.CommonTokenSt
--[ 2019.03.10.13.47.04.807.0 ]--
r 1 import org.antlr.v4.runtime.CommonTokenS
--[ 2019.03.10.13.47.04.834.0 ]--
r 1 import org.antlr.v4.runtime.CommonToken
--[ 2019.03.10.13.47.04.863.0 ]--
r 1 import org.antlr.v4.runtime.CommonToke
--[ 2019.03.10.13.47.04.900.0 ]--
r 1 import org.antlr.v4.runtime.CommonTok
--[ 2019.03.10.13.47.04.945.0 ]--
r 1 import org.antlr.v4.runtime.CommonTo
--[ 2019.03.10.13.47.04.971.0 ]--
r 1 import org.antlr.v4.runtime.CommonT
--[ 2019.03.10.13.47.05.013.0 ]--
r 1 import org.antlr.v4.runtime.Common
--[ 2019.03.10.13.47.05.050.0 ]--
r 1 import org.antlr.v4.runtime.Commo
--[ 2019.03.10.13.47.05.084.0 ]--
r 1 import org.antlr.v4.runtime.Com
--[ 2019.03.10.13.47.05.115.0 ]--
r 1 import org.antlr.v4.runtime.Co
--[ 2019.03.10.13.47.05.152.0 ]--
r 1 import org.antlr.v4.runtime.C
--[ 2019.03.10.13.47.05.184.0 ]--
r 1 import org.antlr.v4.runtime.
--[ 2019.03.10.13.47.05.244.0 ]--
r 1 import org.antlr.v4.runtim
--[ 2019.03.10.13.47.05.297.0 ]--
r 1 import org.antlr.v4.runt
--[ 2019.03.10.13.47.05.332.0 ]--
r 1 import org.antlr.v4.run
--[ 2019.03.10.13.47.05.360.0 ]--
r 1 import org.antlr.v4.ru
--[ 2019.03.10.13.47.05.388.0 ]--
r 1 import org.antlr.v4.r
--[ 2019.03.10.13.47.05.416.0 ]--
r 1 import org.antlr.v4.
--[ 2019.03.10.13.47.05.465.0 ]--
r 1 import org.antlr.v4
--[ 2019.03.10.13.47.05.503.0 ]--
r 1 import org.antlr.v
--[ 2019.03.10.13.47.05.532.0 ]--
r 1 import org.antlr.
--[ 2019.03.10.13.47.05.584.0 ]--
r 1 import org.antl
--[ 2019.03.10.13.47.05.641.0 ]--
r 1 import org.ant
--[ 2019.03.10.13.47.05.681.0 ]--
r 1 import org.a
--[ 2019.03.10.13.47.05.710.0 ]--
r 1 import org.
--[ 2019.03.10.13.47.05.768.0 ]--
r 1 import org
--[ 2019.03.10.13.47.05.807.0 ]--
r 1 import or
--[ 2019.03.10.13.47.05.984.0 ]--
r 1 import o
--[ 2019.03.10.13.47.06.128.0 ]--
r 1 import 
--[ 2019.03.10.13.47.06.294.0 ]--
r 1 import
--[ 2019.03.10.13.47.06.454.0 ]--
r 1 impor
--[ 2019.03.10.13.47.06.600.0 ]--
r 1 impo
--[ 2019.03.10.13.47.06.755.0 ]--
r 1 imp
--[ 2019.03.10.13.47.06.925.0 ]--
r 1 im
--[ 2019.03.10.13.47.07.128.0 ]--
r 1 i
--[ 2019.03.10.13.47.07.399.0 ]--
r 1 
--[ 2019.03.10.13.47.07.928.0 ]--
+ 1 
--[ 2019.03.10.13.47.11.796.0 ]--
r 1 import org.antlr.v4.runtime.*;
--[ 2019.03.10.13.47.43.351.0 ]--
:/gen/Antlr_actionLexer.java
r 1 // Generated from C:/Users/bshelor24/Documents/Taylor 2018-19/lang-struct/A02\AntlrActions.g4 by ANTLR 4.7.2
--[ 2019.03.10.13.47.59.229.0 ]--
UpdateTree (AD): 0 10
- /gen/Antlr_actionLexer.java
- /gen/Antlr_actionParser.java
- /gen/Antlr_actionBaseListener.java
- /gen/Antlr_actionLexer.interp
- /gen/Antlr_action.tokens
- /gen/Antlr_actionBaseVisitor.java
- /gen/Antlr_actionVisitor.java
- /gen/Antlr_action.interp
- /gen/Antlr_actionLexer.tokens
- /gen/Antlr_actionListener.java

--[ 2019.03.10.13.48.03.021.0 ]--
UpdateTree (AD): 3 0
+ /gen/Antlr_actionLexer.java
+ /gen/Antlr_actionLexer.interp
+ /gen/Antlr_actionLexer.tokens

--[ 2019.03.10.13.48.03.045.0 ]--
InitFile: /gen/Antlr_actionLexer.java
// Generated from C:/Users/bshelor24/Documents/Taylor 2018-19/lang-struct/A02\AntlrActions.g4 by ANTLR 4.7.2
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class Antlr_actionLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.7.2", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		ID=10, NUM=11;
	public static String[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	private static String[] makeRuleNames() {
		return new String[] {
			"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
			"ID", "NUM"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, "'EOF'", "';'", "'+'", "'-'", "'*'", "'/'", "'MOD'", "'('", "')'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, null, null, null, null, null, null, null, null, null, "ID", "NUM"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}


	public Antlr_actionLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "AntlrActions.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getChannelNames() { return channelNames; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2\r=\b\1\4\2\t\2\4"+
		"\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t"+
		"\13\4\f\t\f\3\2\3\2\3\2\3\2\3\3\3\3\3\4\3\4\3\5\3\5\3\6\3\6\3\7\3\7\3"+
		"\b\3\b\3\b\3\b\3\t\3\t\3\n\3\n\3\13\3\13\7\13\62\n\13\f\13\16\13\65\13"+
		"\13\3\f\3\f\7\f9\n\f\f\f\16\f<\13\f\2\2\r\3\3\5\4\7\5\t\6\13\7\r\b\17"+
		"\t\21\n\23\13\25\f\27\r\3\2\5\4\2C\\c|\5\2\62;C\\c|\3\2\62;\2>\2\3\3\2"+
		"\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17"+
		"\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\3\31\3\2"+
		"\2\2\5\35\3\2\2\2\7\37\3\2\2\2\t!\3\2\2\2\13#\3\2\2\2\r%\3\2\2\2\17\'"+
		"\3\2\2\2\21+\3\2\2\2\23-\3\2\2\2\25/\3\2\2\2\27\66\3\2\2\2\31\32\7G\2"+
		"\2\32\33\7Q\2\2\33\34\7H\2\2\34\4\3\2\2\2\35\36\7=\2\2\36\6\3\2\2\2\37"+
		" \7-\2\2 \b\3\2\2\2!\"\7/\2\2\"\n\3\2\2\2#$\7,\2\2$\f\3\2\2\2%&\7\61\2"+
		"\2&\16\3\2\2\2\'(\7O\2\2()\7Q\2\2)*\7F\2\2*\20\3\2\2\2+,\7*\2\2,\22\3"+
		"\2\2\2-.\7+\2\2.\24\3\2\2\2/\63\t\2\2\2\60\62\t\3\2\2\61\60\3\2\2\2\62"+
		"\65\3\2\2\2\63\61\3\2\2\2\63\64\3\2\2\2\64\26\3\2\2\2\65\63\3\2\2\2\66"+
		":\t\4\2\2\679\t\4\2\28\67\3\2\2\29<\3\2\2\2:8\3\2\2\2:;\3\2\2\2;\30\3"+
		"\2\2\2<:\3\2\2\2\6\2\61\63:\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}

--[ 2019.03.10.13.48.03.052.0 ]--
InitFile: /gen/Antlr_actionLexer.interp
token literal names:
null
'EOF'
';'
'+'
'-'
'*'
'/'
'MOD'
'('
')'
null
null

token symbolic names:
null
null
null
null
null
null
null
null
null
null
ID
NUM

rule names:
T__0
T__1
T__2
T__3
T__4
T__5
T__6
T__7
T__8
ID
NUM

channel names:
DEFAULT_TOKEN_CHANNEL
HIDDEN

mode names:
DEFAULT_MODE

atn:
[3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 2, 13, 61, 8, 1, 4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7, 9, 7, 4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12, 3, 2, 3, 2, 3, 2, 3, 2, 3, 3, 3, 3, 3, 4, 3, 4, 3, 5, 3, 5, 3, 6, 3, 6, 3, 7, 3, 7, 3, 8, 3, 8, 3, 8, 3, 8, 3, 9, 3, 9, 3, 10, 3, 10, 3, 11, 3, 11, 7, 11, 50, 10, 11, 12, 11, 14, 11, 53, 11, 11, 3, 12, 3, 12, 7, 12, 57, 10, 12, 12, 12, 14, 12, 60, 11, 12, 2, 2, 13, 3, 3, 5, 4, 7, 5, 9, 6, 11, 7, 13, 8, 15, 9, 17, 10, 19, 11, 21, 12, 23, 13, 3, 2, 5, 4, 2, 67, 92, 99, 124, 5, 2, 50, 59, 67, 92, 99, 124, 3, 2, 50, 59, 2, 62, 2, 3, 3, 2, 2, 2, 2, 5, 3, 2, 2, 2, 2, 7, 3, 2, 2, 2, 2, 9, 3, 2, 2, 2, 2, 11, 3, 2, 2, 2, 2, 13, 3, 2, 2, 2, 2, 15, 3, 2, 2, 2, 2, 17, 3, 2, 2, 2, 2, 19, 3, 2, 2, 2, 2, 21, 3, 2, 2, 2, 2, 23, 3, 2, 2, 2, 3, 25, 3, 2, 2, 2, 5, 29, 3, 2, 2, 2, 7, 31, 3, 2, 2, 2, 9, 33, 3, 2, 2, 2, 11, 35, 3, 2, 2, 2, 13, 37, 3, 2, 2, 2, 15, 39, 3, 2, 2, 2, 17, 43, 3, 2, 2, 2, 19, 45, 3, 2, 2, 2, 21, 47, 3, 2, 2, 2, 23, 54, 3, 2, 2, 2, 25, 26, 7, 71, 2, 2, 26, 27, 7, 81, 2, 2, 27, 28, 7, 72, 2, 2, 28, 4, 3, 2, 2, 2, 29, 30, 7, 61, 2, 2, 30, 6, 3, 2, 2, 2, 31, 32, 7, 45, 2, 2, 32, 8, 3, 2, 2, 2, 33, 34, 7, 47, 2, 2, 34, 10, 3, 2, 2, 2, 35, 36, 7, 44, 2, 2, 36, 12, 3, 2, 2, 2, 37, 38, 7, 49, 2, 2, 38, 14, 3, 2, 2, 2, 39, 40, 7, 79, 2, 2, 40, 41, 7, 81, 2, 2, 41, 42, 7, 70, 2, 2, 42, 16, 3, 2, 2, 2, 43, 44, 7, 42, 2, 2, 44, 18, 3, 2, 2, 2, 45, 46, 7, 43, 2, 2, 46, 20, 3, 2, 2, 2, 47, 51, 9, 2, 2, 2, 48, 50, 9, 3, 2, 2, 49, 48, 3, 2, 2, 2, 50, 53, 3, 2, 2, 2, 51, 49, 3, 2, 2, 2, 51, 52, 3, 2, 2, 2, 52, 22, 3, 2, 2, 2, 53, 51, 3, 2, 2, 2, 54, 58, 9, 4, 2, 2, 55, 57, 9, 4, 2, 2, 56, 55, 3, 2, 2, 2, 57, 60, 3, 2, 2, 2, 58, 56, 3, 2, 2, 2, 58, 59, 3, 2, 2, 2, 59, 24, 3, 2, 2, 2, 60, 58, 3, 2, 2, 2, 6, 2, 49, 51, 58, 2]

--[ 2019.03.10.13.48.03.059.0 ]--
InitFile: /gen/Antlr_actionLexer.tokens
T__0=1
T__1=2
T__2=3
T__3=4
T__4=5
T__5=6
T__6=7
T__7=8
T__8=9
ID=10
NUM=11
'EOF'=1
';'=2
'+'=3
'-'=4
'*'=5
'/'=6
'MOD'=7
'('=8
')'=9

--[ 2019.03.10.13.48.27.986.0 ]--
:/AntlrActions.g4
r 1 grammar Antlr_actio;
--[ 2019.03.10.13.48.28.153.0 ]--
r 1 grammar Antlr_acti;
--[ 2019.03.10.13.48.28.295.0 ]--
r 1 grammar Antlr_act;
--[ 2019.03.10.13.48.28.531.0 ]--
r 1 grammar Antlr_ac;
--[ 2019.03.10.13.48.28.558.0 ]--
r 1 grammar Antlr_a;
--[ 2019.03.10.13.48.28.709.0 ]--
r 1 grammar Antlr_;
--[ 2019.03.10.13.48.28.837.0 ]--
r 1 grammar Antlr;
--[ 2019.03.10.13.48.29.372.0 ]--
r 1 grammar AntlrA;
--[ 2019.03.10.13.48.29.551.0 ]--
r 1 grammar AntlrAc;
--[ 2019.03.10.13.48.29.772.0 ]--
r 1 grammar AntlrAct;
--[ 2019.03.10.13.48.29.850.0 ]--
r 1 grammar AntlrActi;
--[ 2019.03.10.13.48.29.911.0 ]--
r 1 grammar AntlrActio;
--[ 2019.03.10.13.48.29.990.0 ]--
r 1 grammar AntlrAction;
--[ 2019.03.10.13.48.30.056.0 ]--
r 1 grammar AntlrActions;
--[ 2019.03.10.13.48.35.311.0 ]--
UpdateTree (AD): 10 0
+ /gen/AntlrActions.interp
+ /gen/AntlrActions.tokens
+ /gen/AntlrActionsLexer.java
+ /gen/AntlrActionsParser.java
+ /gen/AntlrActionsLexer.interp
+ /gen/AntlrActionsLexer.tokens
+ /gen/AntlrActionsVisitor.java
+ /gen/AntlrActionsListener.java
+ /gen/AntlrActionsBaseVisitor.java
+ /gen/AntlrActionsBaseListener.java

--[ 2019.03.10.13.48.35.321.0 ]--
InitFile: /gen/AntlrActions.interp
token literal names:
null
'EOF'
';'
'+'
'-'
'*'
'/'
'MOD'
'('
')'
null
null

token symbolic names:
null
null
null
null
null
null
null
null
null
null
ID
NUM

rule names:
start
list
expr
terms
term
factors
factor


atn:
[3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 3, 13, 67, 4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7, 9, 7, 4, 8, 9, 8, 3, 2, 3, 2, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 3, 25, 10, 3, 3, 4, 3, 4, 3, 4, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 5, 39, 10, 5, 3, 6, 3, 6, 3, 6, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 5, 7, 57, 10, 7, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 5, 8, 65, 10, 8, 3, 8, 2, 2, 9, 2, 4, 6, 8, 10, 12, 14, 2, 2, 2, 67, 2, 16, 3, 2, 2, 2, 4, 24, 3, 2, 2, 2, 6, 26, 3, 2, 2, 2, 8, 38, 3, 2, 2, 2, 10, 40, 3, 2, 2, 2, 12, 56, 3, 2, 2, 2, 14, 64, 3, 2, 2, 2, 16, 17, 5, 4, 3, 2, 17, 18, 7, 3, 2, 2, 18, 3, 3, 2, 2, 2, 19, 20, 5, 6, 4, 2, 20, 21, 7, 4, 2, 2, 21, 22, 5, 4, 3, 2, 22, 25, 3, 2, 2, 2, 23, 25, 3, 2, 2, 2, 24, 19, 3, 2, 2, 2, 24, 23, 3, 2, 2, 2, 25, 5, 3, 2, 2, 2, 26, 27, 5, 10, 6, 2, 27, 28, 5, 8, 5, 2, 28, 7, 3, 2, 2, 2, 29, 30, 7, 5, 2, 2, 30, 31, 5, 10, 6, 2, 31, 32, 5, 8, 5, 2, 32, 39, 3, 2, 2, 2, 33, 34, 7, 6, 2, 2, 34, 35, 5, 10, 6, 2, 35, 36, 5, 8, 5, 2, 36, 39, 3, 2, 2, 2, 37, 39, 3, 2, 2, 2, 38, 29, 3, 2, 2, 2, 38, 33, 3, 2, 2, 2, 38, 37, 3, 2, 2, 2, 39, 9, 3, 2, 2, 2, 40, 41, 5, 14, 8, 2, 41, 42, 5, 12, 7, 2, 42, 11, 3, 2, 2, 2, 43, 44, 7, 7, 2, 2, 44, 45, 5, 14, 8, 2, 45, 46, 5, 12, 7, 2, 46, 57, 3, 2, 2, 2, 47, 48, 7, 8, 2, 2, 48, 49, 5, 14, 8, 2, 49, 50, 5, 12, 7, 2, 50, 57, 3, 2, 2, 2, 51, 52, 7, 9, 2, 2, 52, 53, 5, 14, 8, 2, 53, 54, 5, 12, 7, 2, 54, 57, 3, 2, 2, 2, 55, 57, 3, 2, 2, 2, 56, 43, 3, 2, 2, 2, 56, 47, 3, 2, 2, 2, 56, 51, 3, 2, 2, 2, 56, 55, 3, 2, 2, 2, 57, 13, 3, 2, 2, 2, 58, 59, 7, 10, 2, 2, 59, 60, 5, 6, 4, 2, 60, 61, 7, 11, 2, 2, 61, 65, 3, 2, 2, 2, 62, 65, 7, 12, 2, 2, 63, 65, 7, 13, 2, 2, 64, 58, 3, 2, 2, 2, 64, 62, 3, 2, 2, 2, 64, 63, 3, 2, 2, 2, 65, 15, 3, 2, 2, 2, 6, 24, 38, 56, 64]

--[ 2019.03.10.13.48.35.350.0 ]--
InitFile: /gen/AntlrActions.tokens
T__0=1
T__1=2
T__2=3
T__3=4
T__4=5
T__5=6
T__6=7
T__7=8
T__8=9
ID=10
NUM=11
'EOF'=1
';'=2
'+'=3
'-'=4
'*'=5
'/'=6
'MOD'=7
'('=8
')'=9

--[ 2019.03.10.13.48.35.355.0 ]--
InitFile: /gen/AntlrActionsLexer.java
// Generated from C:/Users/bshelor24/Documents/Taylor 2018-19/lang-struct/A02\AntlrActions.g4 by ANTLR 4.7.2
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class AntlrActionsLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.7.2", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		ID=10, NUM=11;
	public static String[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	private static String[] makeRuleNames() {
		return new String[] {
			"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
			"ID", "NUM"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, "'EOF'", "';'", "'+'", "'-'", "'*'", "'/'", "'MOD'", "'('", "')'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, null, null, null, null, null, null, null, null, null, "ID", "NUM"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}


	public AntlrActionsLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "AntlrActions.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getChannelNames() { return channelNames; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2\r=\b\1\4\2\t\2\4"+
		"\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t"+
		"\13\4\f\t\f\3\2\3\2\3\2\3\2\3\3\3\3\3\4\3\4\3\5\3\5\3\6\3\6\3\7\3\7\3"+
		"\b\3\b\3\b\3\b\3\t\3\t\3\n\3\n\3\13\3\13\7\13\62\n\13\f\13\16\13\65\13"+
		"\13\3\f\3\f\7\f9\n\f\f\f\16\f<\13\f\2\2\r\3\3\5\4\7\5\t\6\13\7\r\b\17"+
		"\t\21\n\23\13\25\f\27\r\3\2\5\4\2C\\c|\5\2\62;C\\c|\3\2\62;\2>\2\3\3\2"+
		"\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17"+
		"\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\3\31\3\2"+
		"\2\2\5\35\3\2\2\2\7\37\3\2\2\2\t!\3\2\2\2\13#\3\2\2\2\r%\3\2\2\2\17\'"+
		"\3\2\2\2\21+\3\2\2\2\23-\3\2\2\2\25/\3\2\2\2\27\66\3\2\2\2\31\32\7G\2"+
		"\2\32\33\7Q\2\2\33\34\7H\2\2\34\4\3\2\2\2\35\36\7=\2\2\36\6\3\2\2\2\37"+
		" \7-\2\2 \b\3\2\2\2!\"\7/\2\2\"\n\3\2\2\2#$\7,\2\2$\f\3\2\2\2%&\7\61\2"+
		"\2&\16\3\2\2\2\'(\7O\2\2()\7Q\2\2)*\7F\2\2*\20\3\2\2\2+,\7*\2\2,\22\3"+
		"\2\2\2-.\7+\2\2.\24\3\2\2\2/\63\t\2\2\2\60\62\t\3\2\2\61\60\3\2\2\2\62"+
		"\65\3\2\2\2\63\61\3\2\2\2\63\64\3\2\2\2\64\26\3\2\2\2\65\63\3\2\2\2\66"+
		":\t\4\2\2\679\t\4\2\28\67\3\2\2\29<\3\2\2\2:8\3\2\2\2:;\3\2\2\2;\30\3"+
		"\2\2\2<:\3\2\2\2\6\2\61\63:\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}

--[ 2019.03.10.13.48.35.358.0 ]--
InitFile: /gen/AntlrActionsParser.java
// Generated from C:/Users/bshelor24/Documents/Taylor 2018-19/lang-struct/A02\AntlrActions.g4 by ANTLR 4.7.2
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class AntlrActionsParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.7.2", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		ID=10, NUM=11;
	public static final int
		RULE_start = 0, RULE_list = 1, RULE_expr = 2, RULE_terms = 3, RULE_term = 4, 
		RULE_factors = 5, RULE_factor = 6;
	private static String[] makeRuleNames() {
		return new String[] {
			"start", "list", "expr", "terms", "term", "factors", "factor"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, "'EOF'", "';'", "'+'", "'-'", "'*'", "'/'", "'MOD'", "'('", "')'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, null, null, null, null, null, null, null, null, null, "ID", "NUM"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "AntlrActions.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public AntlrActionsParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	public static class StartContext extends ParserRuleContext {
		public ListContext list() {
			return getRuleContext(ListContext.class,0);
		}
		public StartContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_start; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof AntlrActionsListener ) ((AntlrActionsListener)listener).enterStart(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof AntlrActionsListener ) ((AntlrActionsListener)listener).exitStart(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof AntlrActionsVisitor ) return ((AntlrActionsVisitor<? extends T>)visitor).visitStart(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StartContext start() throws RecognitionException {
		StartContext _localctx = new StartContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_start);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(14);
			list();
			setState(15);
			match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ListContext extends ParserRuleContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public ListContext list() {
			return getRuleContext(ListContext.class,0);
		}
		public ListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof AntlrActionsListener ) ((AntlrActionsListener)listener).enterList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof AntlrActionsListener ) ((AntlrActionsListener)listener).exitList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof AntlrActionsVisitor ) return ((AntlrActionsVisitor<? extends T>)visitor).visitList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ListContext list() throws RecognitionException {
		ListContext _localctx = new ListContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_list);
		try {
			setState(22);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__7:
			case ID:
			case NUM:
				enterOuterAlt(_localctx, 1);
				{
				setState(17);
				expr();
				setState(18);
				match(T__1);
				setState(19);
				list();
				}
				break;
			case T__0:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExprContext extends ParserRuleContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public TermsContext terms() {
			return getRuleContext(TermsContext.class,0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof AntlrActionsListener ) ((AntlrActionsListener)listener).enterExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof AntlrActionsListener ) ((AntlrActionsListener)listener).exitExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof AntlrActionsVisitor ) return ((AntlrActionsVisitor<? extends T>)visitor).visitExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExprContext expr() throws RecognitionException {
		ExprContext _localctx = new ExprContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_expr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(24);
			term();
			setState(25);
			terms();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TermsContext extends ParserRuleContext {
		public TermContext term() {
			return getRuleContext(TermContext.class,0);
		}
		public TermsContext terms() {
			return getRuleContext(TermsContext.class,0);
		}
		public TermsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_terms; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof AntlrActionsListener ) ((AntlrActionsListener)listener).enterTerms(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof AntlrActionsListener ) ((AntlrActionsListener)listener).exitTerms(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof AntlrActionsVisitor ) return ((AntlrActionsVisitor<? extends T>)visitor).visitTerms(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TermsContext terms() throws RecognitionException {
		TermsContext _localctx = new TermsContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_terms);
		try {
			setState(36);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__2:
				enterOuterAlt(_localctx, 1);
				{
				setState(27);
				match(T__2);
				setState(28);
				term();
				setState(29);
				terms();
				}
				break;
			case T__3:
				enterOuterAlt(_localctx, 2);
				{
				setState(31);
				match(T__3);
				setState(32);
				term();
				setState(33);
				terms();
				}
				break;
			case T__1:
			case T__8:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TermContext extends ParserRuleContext {
		public FactorContext factor() {
			return getRuleContext(FactorContext.class,0);
		}
		public FactorsContext factors() {
			return getRuleContext(FactorsContext.class,0);
		}
		public TermContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_term; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof AntlrActionsListener ) ((AntlrActionsListener)listener).enterTerm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof AntlrActionsListener ) ((AntlrActionsListener)listener).exitTerm(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof AntlrActionsVisitor ) return ((AntlrActionsVisitor<? extends T>)visitor).visitTerm(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TermContext term() throws RecognitionException {
		TermContext _localctx = new TermContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_term);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(38);
			factor();
			setState(39);
			factors();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FactorsContext extends ParserRuleContext {
		public FactorContext factor() {
			return getRuleContext(FactorContext.class,0);
		}
		public FactorsContext factors() {
			return getRuleContext(FactorsContext.class,0);
		}
		public FactorsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_factors; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof AntlrActionsListener ) ((AntlrActionsListener)listener).enterFactors(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof AntlrActionsListener ) ((AntlrActionsListener)listener).exitFactors(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof AntlrActionsVisitor ) return ((AntlrActionsVisitor<? extends T>)visitor).visitFactors(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FactorsContext factors() throws RecognitionException {
		FactorsContext _localctx = new FactorsContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_factors);
		try {
			setState(54);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__4:
				enterOuterAlt(_localctx, 1);
				{
				setState(41);
				match(T__4);
				setState(42);
				factor();
				setState(43);
				factors();
				}
				break;
			case T__5:
				enterOuterAlt(_localctx, 2);
				{
				setState(45);
				match(T__5);
				setState(46);
				factor();
				setState(47);
				factors();
				}
				break;
			case T__6:
				enterOuterAlt(_localctx, 3);
				{
				setState(49);
				match(T__6);
				setState(50);
				factor();
				setState(51);
				factors();
				}
				break;
			case T__1:
			case T__2:
			case T__3:
			case T__8:
				enterOuterAlt(_localctx, 4);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FactorContext extends ParserRuleContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode ID() { return getToken(AntlrActionsParser.ID, 0); }
		public TerminalNode NUM() { return getToken(AntlrActionsParser.NUM, 0); }
		public FactorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_factor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof AntlrActionsListener ) ((AntlrActionsListener)listener).enterFactor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof AntlrActionsListener ) ((AntlrActionsListener)listener).exitFactor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof AntlrActionsVisitor ) return ((AntlrActionsVisitor<? extends T>)visitor).visitFactor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FactorContext factor() throws RecognitionException {
		FactorContext _localctx = new FactorContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_factor);
		try {
			setState(62);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__7:
				enterOuterAlt(_localctx, 1);
				{
				setState(56);
				match(T__7);
				setState(57);
				expr();
				setState(58);
				match(T__8);
				}
				break;
			case ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(60);
				match(ID);
				}
				break;
			case NUM:
				enterOuterAlt(_localctx, 3);
				{
				setState(61);
				match(NUM);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static final String _serializedATN =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\rC\4\2\t\2\4\3\t"+
		"\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\3\2\3\2\3\2\3\3\3\3\3\3\3\3"+
		"\3\3\5\3\31\n\3\3\4\3\4\3\4\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\5\5\'"+
		"\n\5\3\6\3\6\3\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\5"+
		"\79\n\7\3\b\3\b\3\b\3\b\3\b\3\b\5\bA\n\b\3\b\2\2\t\2\4\6\b\n\f\16\2\2"+
		"\2C\2\20\3\2\2\2\4\30\3\2\2\2\6\32\3\2\2\2\b&\3\2\2\2\n(\3\2\2\2\f8\3"+
		"\2\2\2\16@\3\2\2\2\20\21\5\4\3\2\21\22\7\3\2\2\22\3\3\2\2\2\23\24\5\6"+
		"\4\2\24\25\7\4\2\2\25\26\5\4\3\2\26\31\3\2\2\2\27\31\3\2\2\2\30\23\3\2"+
		"\2\2\30\27\3\2\2\2\31\5\3\2\2\2\32\33\5\n\6\2\33\34\5\b\5\2\34\7\3\2\2"+
		"\2\35\36\7\5\2\2\36\37\5\n\6\2\37 \5\b\5\2 \'\3\2\2\2!\"\7\6\2\2\"#\5"+
		"\n\6\2#$\5\b\5\2$\'\3\2\2\2%\'\3\2\2\2&\35\3\2\2\2&!\3\2\2\2&%\3\2\2\2"+
		"\'\t\3\2\2\2()\5\16\b\2)*\5\f\7\2*\13\3\2\2\2+,\7\7\2\2,-\5\16\b\2-.\5"+
		"\f\7\2.9\3\2\2\2/\60\7\b\2\2\60\61\5\16\b\2\61\62\5\f\7\2\629\3\2\2\2"+
		"\63\64\7\t\2\2\64\65\5\16\b\2\65\66\5\f\7\2\669\3\2\2\2\679\3\2\2\28+"+
		"\3\2\2\28/\3\2\2\28\63\3\2\2\28\67\3\2\2\29\r\3\2\2\2:;\7\n\2\2;<\5\6"+
		"\4\2<=\7\13\2\2=A\3\2\2\2>A\7\f\2\2?A\7\r\2\2@:\3\2\2\2@>\3\2\2\2@?\3"+
		"\2\2\2A\17\3\2\2\2\6\30&8@";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}

--[ 2019.03.10.13.48.35.361.0 ]--
InitFile: /gen/AntlrActionsLexer.interp
token literal names:
null
'EOF'
';'
'+'
'-'
'*'
'/'
'MOD'
'('
')'
null
null

token symbolic names:
null
null
null
null
null
null
null
null
null
null
ID
NUM

rule names:
T__0
T__1
T__2
T__3
T__4
T__5
T__6
T__7
T__8
ID
NUM

channel names:
DEFAULT_TOKEN_CHANNEL
HIDDEN

mode names:
DEFAULT_MODE

atn:
[3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 2, 13, 61, 8, 1, 4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7, 9, 7, 4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12, 3, 2, 3, 2, 3, 2, 3, 2, 3, 3, 3, 3, 3, 4, 3, 4, 3, 5, 3, 5, 3, 6, 3, 6, 3, 7, 3, 7, 3, 8, 3, 8, 3, 8, 3, 8, 3, 9, 3, 9, 3, 10, 3, 10, 3, 11, 3, 11, 7, 11, 50, 10, 11, 12, 11, 14, 11, 53, 11, 11, 3, 12, 3, 12, 7, 12, 57, 10, 12, 12, 12, 14, 12, 60, 11, 12, 2, 2, 13, 3, 3, 5, 4, 7, 5, 9, 6, 11, 7, 13, 8, 15, 9, 17, 10, 19, 11, 21, 12, 23, 13, 3, 2, 5, 4, 2, 67, 92, 99, 124, 5, 2, 50, 59, 67, 92, 99, 124, 3, 2, 50, 59, 2, 62, 2, 3, 3, 2, 2, 2, 2, 5, 3, 2, 2, 2, 2, 7, 3, 2, 2, 2, 2, 9, 3, 2, 2, 2, 2, 11, 3, 2, 2, 2, 2, 13, 3, 2, 2, 2, 2, 15, 3, 2, 2, 2, 2, 17, 3, 2, 2, 2, 2, 19, 3, 2, 2, 2, 2, 21, 3, 2, 2, 2, 2, 23, 3, 2, 2, 2, 3, 25, 3, 2, 2, 2, 5, 29, 3, 2, 2, 2, 7, 31, 3, 2, 2, 2, 9, 33, 3, 2, 2, 2, 11, 35, 3, 2, 2, 2, 13, 37, 3, 2, 2, 2, 15, 39, 3, 2, 2, 2, 17, 43, 3, 2, 2, 2, 19, 45, 3, 2, 2, 2, 21, 47, 3, 2, 2, 2, 23, 54, 3, 2, 2, 2, 25, 26, 7, 71, 2, 2, 26, 27, 7, 81, 2, 2, 27, 28, 7, 72, 2, 2, 28, 4, 3, 2, 2, 2, 29, 30, 7, 61, 2, 2, 30, 6, 3, 2, 2, 2, 31, 32, 7, 45, 2, 2, 32, 8, 3, 2, 2, 2, 33, 34, 7, 47, 2, 2, 34, 10, 3, 2, 2, 2, 35, 36, 7, 44, 2, 2, 36, 12, 3, 2, 2, 2, 37, 38, 7, 49, 2, 2, 38, 14, 3, 2, 2, 2, 39, 40, 7, 79, 2, 2, 40, 41, 7, 81, 2, 2, 41, 42, 7, 70, 2, 2, 42, 16, 3, 2, 2, 2, 43, 44, 7, 42, 2, 2, 44, 18, 3, 2, 2, 2, 45, 46, 7, 43, 2, 2, 46, 20, 3, 2, 2, 2, 47, 51, 9, 2, 2, 2, 48, 50, 9, 3, 2, 2, 49, 48, 3, 2, 2, 2, 50, 53, 3, 2, 2, 2, 51, 49, 3, 2, 2, 2, 51, 52, 3, 2, 2, 2, 52, 22, 3, 2, 2, 2, 53, 51, 3, 2, 2, 2, 54, 58, 9, 4, 2, 2, 55, 57, 9, 4, 2, 2, 56, 55, 3, 2, 2, 2, 57, 60, 3, 2, 2, 2, 58, 56, 3, 2, 2, 2, 58, 59, 3, 2, 2, 2, 59, 24, 3, 2, 2, 2, 60, 58, 3, 2, 2, 2, 6, 2, 49, 51, 58, 2]

--[ 2019.03.10.13.48.35.363.0 ]--
InitFile: /gen/AntlrActionsLexer.tokens
T__0=1
T__1=2
T__2=3
T__3=4
T__4=5
T__5=6
T__6=7
T__7=8
T__8=9
ID=10
NUM=11
'EOF'=1
';'=2
'+'=3
'-'=4
'*'=5
'/'=6
'MOD'=7
'('=8
')'=9

--[ 2019.03.10.13.48.35.368.0 ]--
InitFile: /gen/AntlrActionsVisitor.java
// Generated from C:/Users/bshelor24/Documents/Taylor 2018-19/lang-struct/A02\AntlrActions.g4 by ANTLR 4.7.2
import org.antlr.v4.runtime.tree.ParseTreeVisitor;

/**
 * This interface defines a complete generic visitor for a parse tree produced
 * by {@link AntlrActionsParser}.
 *
 * @param <T> The return type of the visit operation. Use {@link Void} for
 * operations with no return type.
 */
public interface AntlrActionsVisitor<T> extends ParseTreeVisitor<T> {
	/**
	 * Visit a parse tree produced by {@link AntlrActionsParser#start}.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	T visitStart(AntlrActionsParser.StartContext ctx);
	/**
	 * Visit a parse tree produced by {@link AntlrActionsParser#list}.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	T visitList(AntlrActionsParser.ListContext ctx);
	/**
	 * Visit a parse tree produced by {@link AntlrActionsParser#expr}.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	T visitExpr(AntlrActionsParser.ExprContext ctx);
	/**
	 * Visit a parse tree produced by {@link AntlrActionsParser#terms}.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	T visitTerms(AntlrActionsParser.TermsContext ctx);
	/**
	 * Visit a parse tree produced by {@link AntlrActionsParser#term}.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	T visitTerm(AntlrActionsParser.TermContext ctx);
	/**
	 * Visit a parse tree produced by {@link AntlrActionsParser#factors}.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	T visitFactors(AntlrActionsParser.FactorsContext ctx);
	/**
	 * Visit a parse tree produced by {@link AntlrActionsParser#factor}.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	T visitFactor(AntlrActionsParser.FactorContext ctx);
}

--[ 2019.03.10.13.48.35.370.0 ]--
InitFile: /gen/AntlrActionsListener.java
// Generated from C:/Users/bshelor24/Documents/Taylor 2018-19/lang-struct/A02\AntlrActions.g4 by ANTLR 4.7.2
import org.antlr.v4.runtime.tree.ParseTreeListener;

/**
 * This interface defines a complete listener for a parse tree produced by
 * {@link AntlrActionsParser}.
 */
public interface AntlrActionsListener extends ParseTreeListener {
	/**
	 * Enter a parse tree produced by {@link AntlrActionsParser#start}.
	 * @param ctx the parse tree
	 */
	void enterStart(AntlrActionsParser.StartContext ctx);
	/**
	 * Exit a parse tree produced by {@link AntlrActionsParser#start}.
	 * @param ctx the parse tree
	 */
	void exitStart(AntlrActionsParser.StartContext ctx);
	/**
	 * Enter a parse tree produced by {@link AntlrActionsParser#list}.
	 * @param ctx the parse tree
	 */
	void enterList(AntlrActionsParser.ListContext ctx);
	/**
	 * Exit a parse tree produced by {@link AntlrActionsParser#list}.
	 * @param ctx the parse tree
	 */
	void exitList(AntlrActionsParser.ListContext ctx);
	/**
	 * Enter a parse tree produced by {@link AntlrActionsParser#expr}.
	 * @param ctx the parse tree
	 */
	void enterExpr(AntlrActionsParser.ExprContext ctx);
	/**
	 * Exit a parse tree produced by {@link AntlrActionsParser#expr}.
	 * @param ctx the parse tree
	 */
	void exitExpr(AntlrActionsParser.ExprContext ctx);
	/**
	 * Enter a parse tree produced by {@link AntlrActionsParser#terms}.
	 * @param ctx the parse tree
	 */
	void enterTerms(AntlrActionsParser.TermsContext ctx);
	/**
	 * Exit a parse tree produced by {@link AntlrActionsParser#terms}.
	 * @param ctx the parse tree
	 */
	void exitTerms(AntlrActionsParser.TermsContext ctx);
	/**
	 * Enter a parse tree produced by {@link AntlrActionsParser#term}.
	 * @param ctx the parse tree
	 */
	void enterTerm(AntlrActionsParser.TermContext ctx);
	/**
	 * Exit a parse tree produced by {@link AntlrActionsParser#term}.
	 * @param ctx the parse tree
	 */
	void exitTerm(AntlrActionsParser.TermContext ctx);
	/**
	 * Enter a parse tree produced by {@link AntlrActionsParser#factors}.
	 * @param ctx the parse tree
	 */
	void enterFactors(AntlrActionsParser.FactorsContext ctx);
	/**
	 * Exit a parse tree produced by {@link AntlrActionsParser#factors}.
	 * @param ctx the parse tree
	 */
	void exitFactors(AntlrActionsParser.FactorsContext ctx);
	/**
	 * Enter a parse tree produced by {@link AntlrActionsParser#factor}.
	 * @param ctx the parse tree
	 */
	void enterFactor(AntlrActionsParser.FactorContext ctx);
	/**
	 * Exit a parse tree produced by {@link AntlrActionsParser#factor}.
	 * @param ctx the parse tree
	 */
	void exitFactor(AntlrActionsParser.FactorContext ctx);
}

--[ 2019.03.10.13.48.35.372.0 ]--
InitFile: /gen/AntlrActionsBaseVisitor.java
// Generated from C:/Users/bshelor24/Documents/Taylor 2018-19/lang-struct/A02\AntlrActions.g4 by ANTLR 4.7.2
import org.antlr.v4.runtime.tree.AbstractParseTreeVisitor;

/**
 * This class provides an empty implementation of {@link AntlrActionsVisitor},
 * which can be extended to create a visitor which only needs to handle a subset
 * of the available methods.
 *
 * @param <T> The return type of the visit operation. Use {@link Void} for
 * operations with no return type.
 */
public class AntlrActionsBaseVisitor<T> extends AbstractParseTreeVisitor<T> implements AntlrActionsVisitor<T> {
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitStart(AntlrActionsParser.StartContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitList(AntlrActionsParser.ListContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitExpr(AntlrActionsParser.ExprContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitTerms(AntlrActionsParser.TermsContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitTerm(AntlrActionsParser.TermContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitFactors(AntlrActionsParser.FactorsContext ctx) { return visitChildren(ctx); }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.</p>
	 */
	@Override public T visitFactor(AntlrActionsParser.FactorContext ctx) { return visitChildren(ctx); }
}

--[ 2019.03.10.13.48.35.375.0 ]--
InitFile: /gen/AntlrActionsBaseListener.java
// Generated from C:/Users/bshelor24/Documents/Taylor 2018-19/lang-struct/A02\AntlrActions.g4 by ANTLR 4.7.2

import org.antlr.v4.runtime.ParserRuleContext;
import org.antlr.v4.runtime.tree.ErrorNode;
import org.antlr.v4.runtime.tree.TerminalNode;

/**
 * This class provides an empty implementation of {@link AntlrActionsListener},
 * which can be extended to create a listener which only needs to handle a subset
 * of the available methods.
 */
public class AntlrActionsBaseListener implements AntlrActionsListener {
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation does nothing.</p>
	 */
	@Override public void enterStart(AntlrActionsParser.StartContext ctx) { }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation does nothing.</p>
	 */
	@Override public void exitStart(AntlrActionsParser.StartContext ctx) { }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation does nothing.</p>
	 */
	@Override public void enterList(AntlrActionsParser.ListContext ctx) { }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation does nothing.</p>
	 */
	@Override public void exitList(AntlrActionsParser.ListContext ctx) { }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation does nothing.</p>
	 */
	@Override public void enterExpr(AntlrActionsParser.ExprContext ctx) { }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation does nothing.</p>
	 */
	@Override public void exitExpr(AntlrActionsParser.ExprContext ctx) { }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation does nothing.</p>
	 */
	@Override public void enterTerms(AntlrActionsParser.TermsContext ctx) { }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation does nothing.</p>
	 */
	@Override public void exitTerms(AntlrActionsParser.TermsContext ctx) { }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation does nothing.</p>
	 */
	@Override public void enterTerm(AntlrActionsParser.TermContext ctx) { }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation does nothing.</p>
	 */
	@Override public void exitTerm(AntlrActionsParser.TermContext ctx) { }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation does nothing.</p>
	 */
	@Override public void enterFactors(AntlrActionsParser.FactorsContext ctx) { }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation does nothing.</p>
	 */
	@Override public void exitFactors(AntlrActionsParser.FactorsContext ctx) { }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation does nothing.</p>
	 */
	@Override public void enterFactor(AntlrActionsParser.FactorContext ctx) { }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation does nothing.</p>
	 */
	@Override public void exitFactor(AntlrActionsParser.FactorContext ctx) { }

	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation does nothing.</p>
	 */
	@Override public void enterEveryRule(ParserRuleContext ctx) { }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation does nothing.</p>
	 */
	@Override public void exitEveryRule(ParserRuleContext ctx) { }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation does nothing.</p>
	 */
	@Override public void visitTerminal(TerminalNode node) { }
	/**
	 * {@inheritDoc}
	 *
	 * <p>The default implementation does nothing.</p>
	 */
	@Override public void visitErrorNode(ErrorNode node) { }
}

--[ 2019.03.10.13.50.37.091.0 ]--
:/Test.java
r 5 public class TCest {
--[ 2019.03.10.13.50.37.299.0 ]--
r 5 public class TCtest {
--[ 2019.03.10.13.50.37.401.0 ]--
r 5 public class TCtiest {
--[ 2019.03.10.13.50.37.470.0 ]--
r 5 public class TCtioest {
--[ 2019.03.10.13.50.37.775.0 ]--
r 5 public class TCtiest {
--[ 2019.03.10.13.50.37.935.0 ]--
r 5 public class TCtest {
--[ 2019.03.10.13.50.38.089.0 ]--
r 5 public class TCest {
--[ 2019.03.10.13.50.38.223.0 ]--
r 5 public class Test {
--[ 2019.03.10.13.50.38.642.0 ]--
r 5 public class est {
--[ 2019.03.10.13.50.40.296.0 ]--
r 5 public class es {
--[ 2019.03.10.13.50.40.463.0 ]--
r 5 public class e {
--[ 2019.03.10.13.50.40.626.0 ]--
r 5 public class  {
--[ 2019.03.10.13.50.41.076.0 ]--
r 5 public class A {
--[ 2019.03.10.13.50.41.291.0 ]--
r 5 public class Ac {
--[ 2019.03.10.13.50.41.445.0 ]--
r 5 public class Act {
--[ 2019.03.10.13.50.41.503.0 ]--
r 5 public class Acti {
--[ 2019.03.10.13.50.41.601.0 ]--
r 5 public class Actio {
--[ 2019.03.10.13.50.41.698.0 ]--
r 5 public class Action {
--[ 2019.03.10.13.50.41.748.0 ]--
r 5 public class Actions {
--[ 2019.03.10.13.50.42.281.0 ]--
r 5 public class ActionsT {
--[ 2019.03.10.13.50.42.403.0 ]--
r 5 public class ActionsTe {
--[ 2019.03.10.13.50.42.463.0 ]--
r 5 public class ActionsTes {
--[ 2019.03.10.13.50.42.574.0 ]--
r 5 public class ActionsTese {
--[ 2019.03.10.13.50.42.625.0 ]--
r 5 public class ActionsTeset {
--[ 2019.03.10.13.50.43.487.0 ]--
r 5 public class ActionsTese {
--[ 2019.03.10.13.50.44.746.0 ]--
r 5 public class ActionsTes {
--[ 2019.03.10.13.50.44.831.0 ]--
r 5 public class ActionsTest {
--[ 2019.03.10.13.50.57.775.0 ]--
UpdateTree (AD): 1 1
- /Test.java
+ /ActionsTest.java

--[ 2019.03.10.13.50.57.785.0 ]--
InitFile: /ActionsTest.java
import org.antlr.v4.runtime.*;

import java.io.FileInputStream;

public class Test {
    public static void main(String[] args) throws Exception {
//        FileInputStream inputstream = new FileInputStream("inputs/test.txt");
//        ANTLRInputStream input = new ANTLRInputStream(inputstream);
        CharStream input = CharStreams.fromFileName("./input.txt");
        AntlrActionsLexer lexer = new AntlrActionsLexer(input);
        CommonTokenStream tokens = new CommonTokenStream(lexer);
        AntlrActionsListenerBaseListener listener = new AntlrActionsBaseListener();
        AntlrActionsParser parser = new AntlrActionsParser(tokens);
        parser.prog(); // parse the input stream!
    };
}

--[ 2019.03.10.13.51.11.028.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.03.10.13.53.42.508.0 ]--
UpdateTree (AD): 1 1
- /ActionsTest.java
+ /src/ActionsTest.java

--[ 2019.03.10.13.53.42.511.0 ]--
InitFile: /src/ActionsTest.java
import org.antlr.v4.runtime.*;

import java.io.FileInputStream;

public class ActionsTest {
    public static void main(String[] args) throws Exception {
//        FileInputStream inputstream = new FileInputStream("inputs/test.txt");
//        ANTLRInputStream input = new ANTLRInputStream(inputstream);
        CharStream input = CharStreams.fromFileName("./input.txt");
        AntlrActionsLexer lexer = new AntlrActionsLexer(input);
        CommonTokenStream tokens = new CommonTokenStream(lexer);
        AntlrActionsListenerBaseListener listener = new AntlrActionsBaseListener();
        AntlrActionsParser parser = new AntlrActionsParser(tokens);
        parser.prog(); // parse the input stream!
    };
}

--[ 2019.03.10.13.53.53.208.0 ]--
:/src/ActionsTest.java
r 12 //        AntlrActionsListenerBaseListener listener = new AntlrActionsBaseListener();
--[ 2019.03.10.13.54.03.782.0 ]--
r 14         parser.pro(); // parse the input stream!
--[ 2019.03.10.13.54.03.947.0 ]--
r 14         parser.pr(); // parse the input stream!
--[ 2019.03.10.13.54.04.116.0 ]--
r 14         parser.p(); // parse the input stream!
--[ 2019.03.10.13.54.04.292.0 ]--
r 14         parser.(); // parse the input stream!
--[ 2019.03.10.13.54.04.669.0 ]--
r 14         parser.s(); // parse the input stream!
--[ 2019.03.10.13.54.04.843.0 ]--
r 14         parser.st(); // parse the input stream!
--[ 2019.03.10.13.54.05.013.0 ]--
r 14         parser.sta(); // parse the input stream!
--[ 2019.03.10.13.54.05.089.0 ]--
r 14         parser.star(); // parse the input stream!
--[ 2019.03.10.13.54.05.238.0 ]--
r 14         parser.start(); // parse the input stream!
--[ 2019.03.10.13.54.41.963.0 ]--
CompilationStatus (AEW): 1 0 0
--[ 2019.03.10.13.54.57.376.0 ]--
UpdateTree (AD): 21 0
+ /out/production/A02/ActionsTest.class
+ /out/production/A02/AntlrActions.interp
+ /out/production/A02/AntlrActions.tokens
+ /out/production/A02/Antlr_actionLexer.class
+ /out/production/A02/AntlrActionsLexer.class
+ /out/production/A02/Antlr_actionLexer.interp
+ /out/production/A02/Antlr_actionLexer.tokens
+ /out/production/A02/AntlrActionsLexer.interp
+ /out/production/A02/AntlrActionsLexer.tokens
+ /out/production/A02/AntlrActionsParser.class
+ /out/production/A02/AntlrActionsVisitor.class
+ /out/production/A02/AntlrActionsListener.class
+ /out/production/A02/AntlrActionsBaseVisitor.class
+ /out/production/A02/AntlrActionsBaseListener.class
+ /out/production/A02/AntlrActionsParser$ExprContext.class
+ /out/production/A02/AntlrActionsParser$ListContext.class
+ /out/production/A02/AntlrActionsParser$TermContext.class
+ /out/production/A02/AntlrActionsParser$StartContext.class
+ /out/production/A02/AntlrActionsParser$TermsContext.class
+ /out/production/A02/AntlrActionsParser$FactorContext.class
+ /out/production/A02/AntlrActionsParser$FactorsContext.class

--[ 2019.03.10.13.54.57.380.0 ]--
InitFile: /out/production/A02/AntlrActions.interp
token literal names:
null
'EOF'
';'
'+'
'-'
'*'
'/'
'MOD'
'('
')'
null
null

token symbolic names:
null
null
null
null
null
null
null
null
null
null
ID
NUM

rule names:
start
list
expr
terms
term
factors
factor


atn:
[3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 3, 13, 67, 4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7, 9, 7, 4, 8, 9, 8, 3, 2, 3, 2, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 3, 25, 10, 3, 3, 4, 3, 4, 3, 4, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 5, 39, 10, 5, 3, 6, 3, 6, 3, 6, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 5, 7, 57, 10, 7, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 5, 8, 65, 10, 8, 3, 8, 2, 2, 9, 2, 4, 6, 8, 10, 12, 14, 2, 2, 2, 67, 2, 16, 3, 2, 2, 2, 4, 24, 3, 2, 2, 2, 6, 26, 3, 2, 2, 2, 8, 38, 3, 2, 2, 2, 10, 40, 3, 2, 2, 2, 12, 56, 3, 2, 2, 2, 14, 64, 3, 2, 2, 2, 16, 17, 5, 4, 3, 2, 17, 18, 7, 3, 2, 2, 18, 3, 3, 2, 2, 2, 19, 20, 5, 6, 4, 2, 20, 21, 7, 4, 2, 2, 21, 22, 5, 4, 3, 2, 22, 25, 3, 2, 2, 2, 23, 25, 3, 2, 2, 2, 24, 19, 3, 2, 2, 2, 24, 23, 3, 2, 2, 2, 25, 5, 3, 2, 2, 2, 26, 27, 5, 10, 6, 2, 27, 28, 5, 8, 5, 2, 28, 7, 3, 2, 2, 2, 29, 30, 7, 5, 2, 2, 30, 31, 5, 10, 6, 2, 31, 32, 5, 8, 5, 2, 32, 39, 3, 2, 2, 2, 33, 34, 7, 6, 2, 2, 34, 35, 5, 10, 6, 2, 35, 36, 5, 8, 5, 2, 36, 39, 3, 2, 2, 2, 37, 39, 3, 2, 2, 2, 38, 29, 3, 2, 2, 2, 38, 33, 3, 2, 2, 2, 38, 37, 3, 2, 2, 2, 39, 9, 3, 2, 2, 2, 40, 41, 5, 14, 8, 2, 41, 42, 5, 12, 7, 2, 42, 11, 3, 2, 2, 2, 43, 44, 7, 7, 2, 2, 44, 45, 5, 14, 8, 2, 45, 46, 5, 12, 7, 2, 46, 57, 3, 2, 2, 2, 47, 48, 7, 8, 2, 2, 48, 49, 5, 14, 8, 2, 49, 50, 5, 12, 7, 2, 50, 57, 3, 2, 2, 2, 51, 52, 7, 9, 2, 2, 52, 53, 5, 14, 8, 2, 53, 54, 5, 12, 7, 2, 54, 57, 3, 2, 2, 2, 55, 57, 3, 2, 2, 2, 56, 43, 3, 2, 2, 2, 56, 47, 3, 2, 2, 2, 56, 51, 3, 2, 2, 2, 56, 55, 3, 2, 2, 2, 57, 13, 3, 2, 2, 2, 58, 59, 7, 10, 2, 2, 59, 60, 5, 6, 4, 2, 60, 61, 7, 11, 2, 2, 61, 65, 3, 2, 2, 2, 62, 65, 7, 12, 2, 2, 63, 65, 7, 13, 2, 2, 64, 58, 3, 2, 2, 2, 64, 62, 3, 2, 2, 2, 64, 63, 3, 2, 2, 2, 65, 15, 3, 2, 2, 2, 6, 24, 38, 56, 64]

--[ 2019.03.10.13.54.57.384.0 ]--
InitFile: /out/production/A02/AntlrActions.tokens
T__0=1
T__1=2
T__2=3
T__3=4
T__4=5
T__5=6
T__6=7
T__7=8
T__8=9
ID=10
NUM=11
'EOF'=1
';'=2
'+'=3
'-'=4
'*'=5
'/'=6
'MOD'=7
'('=8
')'=9

--[ 2019.03.10.13.54.57.387.0 ]--
InitFile: /out/production/A02/Antlr_actionLexer.interp
token literal names:
null
'EOF'
';'
'+'
'-'
'*'
'/'
'MOD'
'('
')'
null
null

token symbolic names:
null
null
null
null
null
null
null
null
null
null
ID
NUM

rule names:
T__0
T__1
T__2
T__3
T__4
T__5
T__6
T__7
T__8
ID
NUM

channel names:
DEFAULT_TOKEN_CHANNEL
HIDDEN

mode names:
DEFAULT_MODE

atn:
[3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 2, 13, 61, 8, 1, 4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7, 9, 7, 4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12, 3, 2, 3, 2, 3, 2, 3, 2, 3, 3, 3, 3, 3, 4, 3, 4, 3, 5, 3, 5, 3, 6, 3, 6, 3, 7, 3, 7, 3, 8, 3, 8, 3, 8, 3, 8, 3, 9, 3, 9, 3, 10, 3, 10, 3, 11, 3, 11, 7, 11, 50, 10, 11, 12, 11, 14, 11, 53, 11, 11, 3, 12, 3, 12, 7, 12, 57, 10, 12, 12, 12, 14, 12, 60, 11, 12, 2, 2, 13, 3, 3, 5, 4, 7, 5, 9, 6, 11, 7, 13, 8, 15, 9, 17, 10, 19, 11, 21, 12, 23, 13, 3, 2, 5, 4, 2, 67, 92, 99, 124, 5, 2, 50, 59, 67, 92, 99, 124, 3, 2, 50, 59, 2, 62, 2, 3, 3, 2, 2, 2, 2, 5, 3, 2, 2, 2, 2, 7, 3, 2, 2, 2, 2, 9, 3, 2, 2, 2, 2, 11, 3, 2, 2, 2, 2, 13, 3, 2, 2, 2, 2, 15, 3, 2, 2, 2, 2, 17, 3, 2, 2, 2, 2, 19, 3, 2, 2, 2, 2, 21, 3, 2, 2, 2, 2, 23, 3, 2, 2, 2, 3, 25, 3, 2, 2, 2, 5, 29, 3, 2, 2, 2, 7, 31, 3, 2, 2, 2, 9, 33, 3, 2, 2, 2, 11, 35, 3, 2, 2, 2, 13, 37, 3, 2, 2, 2, 15, 39, 3, 2, 2, 2, 17, 43, 3, 2, 2, 2, 19, 45, 3, 2, 2, 2, 21, 47, 3, 2, 2, 2, 23, 54, 3, 2, 2, 2, 25, 26, 7, 71, 2, 2, 26, 27, 7, 81, 2, 2, 27, 28, 7, 72, 2, 2, 28, 4, 3, 2, 2, 2, 29, 30, 7, 61, 2, 2, 30, 6, 3, 2, 2, 2, 31, 32, 7, 45, 2, 2, 32, 8, 3, 2, 2, 2, 33, 34, 7, 47, 2, 2, 34, 10, 3, 2, 2, 2, 35, 36, 7, 44, 2, 2, 36, 12, 3, 2, 2, 2, 37, 38, 7, 49, 2, 2, 38, 14, 3, 2, 2, 2, 39, 40, 7, 79, 2, 2, 40, 41, 7, 81, 2, 2, 41, 42, 7, 70, 2, 2, 42, 16, 3, 2, 2, 2, 43, 44, 7, 42, 2, 2, 44, 18, 3, 2, 2, 2, 45, 46, 7, 43, 2, 2, 46, 20, 3, 2, 2, 2, 47, 51, 9, 2, 2, 2, 48, 50, 9, 3, 2, 2, 49, 48, 3, 2, 2, 2, 50, 53, 3, 2, 2, 2, 51, 49, 3, 2, 2, 2, 51, 52, 3, 2, 2, 2, 52, 22, 3, 2, 2, 2, 53, 51, 3, 2, 2, 2, 54, 58, 9, 4, 2, 2, 55, 57, 9, 4, 2, 2, 56, 55, 3, 2, 2, 2, 57, 60, 3, 2, 2, 2, 58, 56, 3, 2, 2, 2, 58, 59, 3, 2, 2, 2, 59, 24, 3, 2, 2, 2, 60, 58, 3, 2, 2, 2, 6, 2, 49, 51, 58, 2]

--[ 2019.03.10.13.54.57.390.0 ]--
InitFile: /out/production/A02/Antlr_actionLexer.tokens
T__0=1
T__1=2
T__2=3
T__3=4
T__4=5
T__5=6
T__6=7
T__7=8
T__8=9
ID=10
NUM=11
'EOF'=1
';'=2
'+'=3
'-'=4
'*'=5
'/'=6
'MOD'=7
'('=8
')'=9

--[ 2019.03.10.13.54.57.393.0 ]--
InitFile: /out/production/A02/AntlrActionsLexer.interp
token literal names:
null
'EOF'
';'
'+'
'-'
'*'
'/'
'MOD'
'('
')'
null
null

token symbolic names:
null
null
null
null
null
null
null
null
null
null
ID
NUM

rule names:
T__0
T__1
T__2
T__3
T__4
T__5
T__6
T__7
T__8
ID
NUM

channel names:
DEFAULT_TOKEN_CHANNEL
HIDDEN

mode names:
DEFAULT_MODE

atn:
[3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 2, 13, 61, 8, 1, 4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7, 9, 7, 4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12, 3, 2, 3, 2, 3, 2, 3, 2, 3, 3, 3, 3, 3, 4, 3, 4, 3, 5, 3, 5, 3, 6, 3, 6, 3, 7, 3, 7, 3, 8, 3, 8, 3, 8, 3, 8, 3, 9, 3, 9, 3, 10, 3, 10, 3, 11, 3, 11, 7, 11, 50, 10, 11, 12, 11, 14, 11, 53, 11, 11, 3, 12, 3, 12, 7, 12, 57, 10, 12, 12, 12, 14, 12, 60, 11, 12, 2, 2, 13, 3, 3, 5, 4, 7, 5, 9, 6, 11, 7, 13, 8, 15, 9, 17, 10, 19, 11, 21, 12, 23, 13, 3, 2, 5, 4, 2, 67, 92, 99, 124, 5, 2, 50, 59, 67, 92, 99, 124, 3, 2, 50, 59, 2, 62, 2, 3, 3, 2, 2, 2, 2, 5, 3, 2, 2, 2, 2, 7, 3, 2, 2, 2, 2, 9, 3, 2, 2, 2, 2, 11, 3, 2, 2, 2, 2, 13, 3, 2, 2, 2, 2, 15, 3, 2, 2, 2, 2, 17, 3, 2, 2, 2, 2, 19, 3, 2, 2, 2, 2, 21, 3, 2, 2, 2, 2, 23, 3, 2, 2, 2, 3, 25, 3, 2, 2, 2, 5, 29, 3, 2, 2, 2, 7, 31, 3, 2, 2, 2, 9, 33, 3, 2, 2, 2, 11, 35, 3, 2, 2, 2, 13, 37, 3, 2, 2, 2, 15, 39, 3, 2, 2, 2, 17, 43, 3, 2, 2, 2, 19, 45, 3, 2, 2, 2, 21, 47, 3, 2, 2, 2, 23, 54, 3, 2, 2, 2, 25, 26, 7, 71, 2, 2, 26, 27, 7, 81, 2, 2, 27, 28, 7, 72, 2, 2, 28, 4, 3, 2, 2, 2, 29, 30, 7, 61, 2, 2, 30, 6, 3, 2, 2, 2, 31, 32, 7, 45, 2, 2, 32, 8, 3, 2, 2, 2, 33, 34, 7, 47, 2, 2, 34, 10, 3, 2, 2, 2, 35, 36, 7, 44, 2, 2, 36, 12, 3, 2, 2, 2, 37, 38, 7, 49, 2, 2, 38, 14, 3, 2, 2, 2, 39, 40, 7, 79, 2, 2, 40, 41, 7, 81, 2, 2, 41, 42, 7, 70, 2, 2, 42, 16, 3, 2, 2, 2, 43, 44, 7, 42, 2, 2, 44, 18, 3, 2, 2, 2, 45, 46, 7, 43, 2, 2, 46, 20, 3, 2, 2, 2, 47, 51, 9, 2, 2, 2, 48, 50, 9, 3, 2, 2, 49, 48, 3, 2, 2, 2, 50, 53, 3, 2, 2, 2, 51, 49, 3, 2, 2, 2, 51, 52, 3, 2, 2, 2, 52, 22, 3, 2, 2, 2, 53, 51, 3, 2, 2, 2, 54, 58, 9, 4, 2, 2, 55, 57, 9, 4, 2, 2, 56, 55, 3, 2, 2, 2, 57, 60, 3, 2, 2, 2, 58, 56, 3, 2, 2, 2, 58, 59, 3, 2, 2, 2, 59, 24, 3, 2, 2, 2, 60, 58, 3, 2, 2, 2, 6, 2, 49, 51, 58, 2]

--[ 2019.03.10.13.54.57.395.0 ]--
InitFile: /out/production/A02/AntlrActionsLexer.tokens
T__0=1
T__1=2
T__2=3
T__3=4
T__4=5
T__5=6
T__6=7
T__7=8
T__8=9
ID=10
NUM=11
'EOF'=1
';'=2
'+'=3
'-'=4
'*'=5
'/'=6
'MOD'=7
'('=8
')'=9

--[ 2019.03.10.13.54.57.424.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.03.10.13.56.34.100.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.03.10.13.58.30.091.0 ]--
:/AntlrActions.g4
r 3 start : list 'EOF;
--[ 2019.03.10.13.58.30.266.0 ]--
r 3 start : list 'EO;
--[ 2019.03.10.13.58.30.399.0 ]--
r 3 start : list 'E;
--[ 2019.03.10.13.58.30.592.0 ]--
r 3 start : list ';
--[ 2019.03.10.13.58.30.821.0 ]--
r 3 start : list ;
--[ 2019.03.10.13.58.31.218.0 ]--
r 3 start : list e;
--[ 2019.03.10.13.58.31.327.0 ]--
r 3 start : list eo;
--[ 2019.03.10.13.58.31.396.0 ]--
r 3 start : list eof;
--[ 2019.03.10.13.58.34.642.0 ]--
r 3 start : list eo;
--[ 2019.03.10.13.58.34.922.0 ]--
r 3 start : list e;
--[ 2019.03.10.13.58.35.158.0 ]--
r 3 start : list ;
--[ 2019.03.10.13.58.37.042.0 ]--
r 3 start : list E;
--[ 2019.03.10.13.58.37.191.0 ]--
r 3 start : list EO;
--[ 2019.03.10.13.58.37.333.0 ]--
r 3 start : list EOF;
--[ 2019.03.10.13.58.38.564.0 ]--
r 3 start : list EO;
--[ 2019.03.10.13.58.38.737.0 ]--
r 3 start : list E;
--[ 2019.03.10.13.58.38.915.0 ]--
r 3 start : list ;
--[ 2019.03.10.13.58.39.574.0 ]--
r 3 start : list ';
--[ 2019.03.10.13.58.39.864.0 ]--
r 3 start : list 'E;
--[ 2019.03.10.13.58.40.014.0 ]--
r 3 start : list 'EO;
--[ 2019.03.10.13.58.40.076.0 ]--
r 3 start : list 'EOF;
--[ 2019.03.10.13.58.40.748.0 ]--
r 3 start : list 'EOF';
--[ 2019.03.10.13.59.22.720.0 ]--
+ 13 W
--[ 2019.03.10.13.59.22.936.0 ]--
r 13 WS
--[ 2019.03.10.13.59.23.309.0 ]--
r 13 WS:
--[ 2019.03.10.13.59.23.731.0 ]--
r 13 WS
--[ 2019.03.10.13.59.23.861.0 ]--
r 13 WS 
--[ 2019.03.10.13.59.24.131.0 ]--
r 13 WS :
--[ 2019.03.10.13.59.24.240.0 ]--
r 13 WS : 
--[ 2019.03.10.13.59.25.452.0 ]--
r 13 WS : /
--[ 2019.03.10.13.59.25.772.0 ]--
r 13 WS : /t
--[ 2019.03.10.13.59.27.968.0 ]--
r 13 WS : /
--[ 2019.03.10.13.59.28.179.0 ]--
r 13 WS : 
--[ 2019.03.10.13.59.29.499.0 ]--
r 13 WS : {
--[ 2019.03.10.13.59.29.681.0 ]--
r 13 WS : { 
--[ 2019.03.10.13.59.32.002.0 ]--
r 13 WS : {
--[ 2019.03.10.13.59.32.189.0 ]--
r 13 WS : 
--[ 2019.03.10.13.59.32.934.0 ]--
r 13 WS : [
--[ 2019.03.10.13.59.33.287.0 ]--
r 13 WS : [ 
--[ 2019.03.10.13.59.33.747.0 ]--
r 13 WS : [ \
--[ 2019.03.10.13.59.34.129.0 ]--
r 13 WS : [ \t
--[ 2019.03.10.13.59.35.272.0 ]--
r 13 WS : [ \t\
--[ 2019.03.10.13.59.35.992.0 ]--
r 13 WS : [ \t\r
--[ 2019.03.10.13.59.36.335.0 ]--
r 13 WS : [ \t\r\
--[ 2019.03.10.13.59.36.681.0 ]--
r 13 WS : [ \t\r\n
--[ 2019.03.10.13.59.39.498.0 ]--
r 13 WS : [ \t\r\n 
--[ 2019.03.10.13.59.40.195.0 ]--
r 13 WS : [ \t\r\n -
--[ 2019.03.10.13.59.40.375.0 ]--
r 13 WS : [ \t\r\n --
--[ 2019.03.10.13.59.41.063.0 ]--
r 13 WS : [ \t\r\n -
--[ 2019.03.10.13.59.41.294.0 ]--
r 13 WS : [ \t\r\n ->
--[ 2019.03.10.13.59.41.478.0 ]--
r 13 WS : [ \t\r\n -> 
--[ 2019.03.10.13.59.41.667.0 ]--
r 13 WS : [ \t\r\n -> s
--[ 2019.03.10.13.59.41.735.0 ]--
r 13 WS : [ \t\r\n -> sk
--[ 2019.03.10.13.59.42.023.0 ]--
r 13 WS : [ \t\r\n -> ski
--[ 2019.03.10.13.59.42.182.0 ]--
r 13 WS : [ \t\r\n -> skip
--[ 2019.03.10.13.59.42.995.0 ]--
r 13 WS : [ \t\r\n -> skip 
--[ 2019.03.10.13.59.43.183.0 ]--
r 13 WS : [ \t\r\n -> skip ]
--[ 2019.03.10.13.59.46.002.0 ]--
r 13 WS : [ \t\r\n -> skip 
--[ 2019.03.10.13.59.47.095.0 ]--
r 13 WS : [ \t\r\n -> skip
--[ 2019.03.10.13.59.47.303.0 ]--
r 13 WS : [ \t\r\n -> skip;
--[ 2019.03.10.13.59.49.658.0 ]--
r 13 WS : [ \t\r\n  -> skip;
--[ 2019.03.10.13.59.49.893.0 ]--
r 13 WS : [ \t\r\n ] -> skip;
--[ 2019.03.10.14.00.05.124.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.03.10.14.00.24.733.0 ]--
r 13 WS : [\t\r\n ] -> skip;
--[ 2019.03.10.14.00.26.850.0 ]--
r 13 WS : [\t\r\n] -> skip;
--[ 2019.03.10.14.00.29.965.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.03.10.14.01.56.200.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.03.10.14.02.20.837.0 ]--
:/src/ActionsTest.java
+ 10         
--[ 2019.03.10.14.02.21.717.0 ]--
r 10         s
--[ 2019.03.10.14.02.21.947.0 ]--
r 10         sy
--[ 2019.03.10.14.02.22.057.0 ]--
r 10         sys
--[ 2019.03.10.14.02.22.206.0 ]--
r 10         syst
--[ 2019.03.10.14.02.22.338.0 ]--
r 10         syste
--[ 2019.03.10.14.02.22.384.0 ]--
r 10         system
--[ 2019.03.10.14.02.23.288.0 ]--
r 10         system.
--[ 2019.03.10.14.02.23.793.0 ]--
r 10         system.p
--[ 2019.03.10.14.02.24.108.0 ]--
r 10         system.pr
--[ 2019.03.10.14.02.24.186.0 ]--
r 10         system.pri
--[ 2019.03.10.14.02.24.249.0 ]--
r 10         system.prin
--[ 2019.03.10.14.02.24.334.0 ]--
r 10         system.print
--[ 2019.03.10.14.02.35.426.0 ]--
r 10         
--[ 2019.03.10.14.02.35.598.0 ]--
r 10         o
--[ 2019.03.10.14.02.35.747.0 ]--
r 10         on
--[ 2019.03.10.14.02.35.856.0 ]--
r 10         onc
--[ 2019.03.10.14.02.35.950.0 ]--
r 10         onco
--[ 2019.03.10.14.02.36.139.0 ]--
r 10         oncol
--[ 2019.03.10.14.02.36.255.0 ]--
r 10         oncole
--[ 2019.03.10.14.02.36.454.0 ]--
r 10         oncol
--[ 2019.03.10.14.02.36.617.0 ]--
r 10         onco
--[ 2019.03.10.14.02.36.765.0 ]--
r 10         onc
--[ 2019.03.10.14.02.36.926.0 ]--
r 10         on
--[ 2019.03.10.14.02.37.092.0 ]--
r 10         o
--[ 2019.03.10.14.02.37.226.0 ]--
r 10         
--[ 2019.03.10.14.02.37.359.0 ]--
r 10         c
--[ 2019.03.10.14.02.37.483.0 ]--
r 10         co
--[ 2019.03.10.14.02.37.531.0 ]--
r 10         con
--[ 2019.03.10.14.02.37.618.0 ]--
r 10         conc
--[ 2019.03.10.14.02.37.857.0 ]--
r 10         concl
--[ 2019.03.10.14.02.38.378.0 ]--
r 10         conc
--[ 2019.03.10.14.02.38.563.0 ]--
r 10         con
--[ 2019.03.10.14.02.38.742.0 ]--
r 10         cons
--[ 2019.03.10.14.02.38.835.0 ]--
r 10         conso
--[ 2019.03.10.14.02.38.976.0 ]--
r 10         consol
--[ 2019.03.10.14.02.39.054.0 ]--
r 10         console
--[ 2019.03.10.14.02.39.491.0 ]--
r 10         console.
--[ 2019.03.10.14.02.39.664.0 ]--
r 10         console.l
--[ 2019.03.10.14.02.39.820.0 ]--
r 10         console.lo
--[ 2019.03.10.14.02.39.914.0 ]--
r 10         console.log
--[ 2019.03.10.14.02.40.369.0 ]--
r 10         console.log()
--[ 2019.03.10.14.02.41.903.0 ]--
r 10         console.log(i)
--[ 2019.03.10.14.02.41.947.0 ]--
r 10         console.log(in)
--[ 2019.03.10.14.02.42.026.0 ]--
r 10         console.log(inp)
--[ 2019.03.10.14.02.42.139.0 ]--
r 10         console.log(inpu)
--[ 2019.03.10.14.02.42.220.0 ]--
r 10         console.log(input)
--[ 2019.03.10.14.02.43.129.0 ]--
r 10         console.log(input);
--[ 2019.03.10.14.02.54.145.0 ]--
r 10 //        console.log(input);
--[ 2019.03.10.14.04.37.363.0 ]--
r 9         CharStream input = CharStreams.fromFileName(".input.txt");
--[ 2019.03.10.14.04.37.626.0 ]--
r 9         CharStream input = CharStreams.fromFileName("input.txt");
--[ 2019.03.10.14.04.49.361.0 ]--
:/gen/AntlrActions.tokens
+ 12 WS=12
--[ 2019.03.10.14.04.49.501.0 ]--
:/gen/AntlrActionsLexer.interp
+ 12 null
+ 29 WS
+ 43 WS
r 53 [3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 2, 14, 67, 8, 1, 4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7, 9, 7, 4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12, 4, 13, 9, 13, 3, 2, 3, 2, 3, 2, 3, 2, 3, 3, 3, 3, 3, 4, 3, 4, 3, 5, 3, 5, 3, 6, 3, 6, 3, 7, 3, 7, 3, 8, 3, 8, 3, 8, 3, 8, 3, 9, 3, 9, 3, 10, 3, 10, 3, 11, 3, 11, 7, 11, 52, 10, 11, 12, 11, 14, 11, 55, 11, 11, 3, 12, 3, 12, 7, 12, 59, 10, 12, 12, 12, 14, 12, 62, 11, 12, 3, 13, 3, 13, 3, 13, 3, 13, 2, 2, 14, 3, 3, 5, 4, 7, 5, 9, 6, 11, 7, 13, 8, 15, 9, 17, 10, 19, 11, 21, 12, 23, 13, 25, 14, 3, 2, 6, 4, 2, 67, 92, 99, 124, 5, 2, 50, 59, 67, 92, 99, 124, 3, 2, 50, 59, 4, 2, 11, 12, 15, 15, 2, 68, 2, 3, 3, 2, 2, 2, 2, 5, 3, 2, 2, 2, 2, 7, 3, 2, 2, 2, 2, 9, 3, 2, 2, 2, 2, 11, 3, 2, 2, 2, 2, 13, 3, 2, 2, 2, 2, 15, 3, 2, 2, 2, 2, 17, 3, 2, 2, 2, 2, 19, 3, 2, 2, 2, 2, 21, 3, 2, 2, 2, 2, 23, 3, 2, 2, 2, 2, 25, 3, 2, 2, 2, 3, 27, 3, 2, 2, 2, 5, 31, 3, 2, 2, 2, 7, 33, 3, 2, 2, 2, 9, 35, 3, 2, 2, 2, 11, 37, 3, 2, 2, 2, 13, 39, 3, 2, 2, 2, 15, 41, 3, 2, 2, 2, 17, 45, 3, 2, 2, 2, 19, 47, 3, 2, 2, 2, 21, 49, 3, 2, 2, 2, 23, 56, 3, 2, 2, 2, 25, 63, 3, 2, 2, 2, 27, 28, 7, 71, 2, 2, 28, 29, 7, 81, 2, 2, 29, 30, 7, 72, 2, 2, 30, 4, 3, 2, 2, 2, 31, 32, 7, 61, 2, 2, 32, 6, 3, 2, 2, 2, 33, 34, 7, 45, 2, 2, 34, 8, 3, 2, 2, 2, 35, 36, 7, 47, 2, 2, 36, 10, 3, 2, 2, 2, 37, 38, 7, 44, 2, 2, 38, 12, 3, 2, 2, 2, 39, 40, 7, 49, 2, 2, 40, 14, 3, 2, 2, 2, 41, 42, 7, 79, 2, 2, 42, 43, 7, 81, 2, 2, 43, 44, 7, 70, 2, 2, 44, 16, 3, 2, 2, 2, 45, 46, 7, 42, 2, 2, 46, 18, 3, 2, 2, 2, 47, 48, 7, 43, 2, 2, 48, 20, 3, 2, 2, 2, 49, 53, 9, 2, 2, 2, 50, 52, 9, 3, 2, 2, 51, 50, 3, 2, 2, 2, 52, 55, 3, 2, 2, 2, 53, 51, 3, 2, 2, 2, 53, 54, 3, 2, 2, 2, 54, 22, 3, 2, 2, 2, 55, 53, 3, 2, 2, 2, 56, 60, 9, 4, 2, 2, 57, 59, 9, 4, 2, 2, 58, 57, 3, 2, 2, 2, 59, 62, 3, 2, 2, 2, 60, 58, 3, 2, 2, 2, 60, 61, 3, 2, 2, 2, 61, 24, 3, 2, 2, 2, 62, 60, 3, 2, 2, 2, 63, 64, 9, 5, 2, 2, 64, 65, 3, 2, 2, 2, 65, 66, 8, 13, 2, 2, 66, 26, 3, 2, 2, 2, 6, 2, 51, 53, 60, 3, 8, 2, 2]
--[ 2019.03.10.14.04.49.553.0 ]--
:/gen/AntlrActionsLexer.tokens
+ 12 WS=12
--[ 2019.03.10.14.04.49.806.0 ]--
:/gen/AntlrActionsLexer.java
r 20 		ID=10, NUM=11, WS=12;
r 32 			"ID", "NUM", "WS"
+ 45 			null, null, null, null, null, null, null, null, null, null, "ID", "NUM", 
r 46 			"WS"
r 108 		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2\16C\b\1\4\2\t\2\4"+
+ 110 		"\13\4\f\t\f\4\r\t\r\3\2\3\2\3\2\3\2\3\3\3\3\3\4\3\4\3\5\3\5\3\6\3\6\3"+
+ 111 		"\7\3\7\3\b\3\b\3\b\3\b\3\t\3\t\3\n\3\n\3\13\3\13\7\13\64\n\13\f\13\16"+
r 112 		"\13\67\13\13\3\f\3\f\7\f;\n\f\f\f\16\f>\13\f\3\r\3\r\3\r\3\r\2\2\16\3"+
r 113 		"\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\3\2\6\4\2C\\c"+
r 114 		"|\5\2\62;C\\c|\3\2\62;\4\2\13\f\17\17\2D\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3"+
r 115 		"\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2"+
r 116 		"\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\3\33\3\2\2\2\5\37"+
r 117 		"\3\2\2\2\7!\3\2\2\2\t#\3\2\2\2\13%\3\2\2\2\r\'\3\2\2\2\17)\3\2\2\2\21"+
r 118 		"-\3\2\2\2\23/\3\2\2\2\25\61\3\2\2\2\278\3\2\2\2\31?\3\2\2\2\33\34\7G\2"+
r 119 		"\2\34\35\7Q\2\2\35\36\7H\2\2\36\4\3\2\2\2\37 \7=\2\2 \6\3\2\2\2!\"\7-"+
r 120 		"\2\2\"\b\3\2\2\2#$\7/\2\2$\n\3\2\2\2%&\7,\2\2&\f\3\2\2\2\'(\7\61\2\2("+
r 121 		"\16\3\2\2\2)*\7O\2\2*+\7Q\2\2+,\7F\2\2,\20\3\2\2\2-.\7*\2\2.\22\3\2\2"+
r 122 		"\2/\60\7+\2\2\60\24\3\2\2\2\61\65\t\2\2\2\62\64\t\3\2\2\63\62\3\2\2\2"+
r 123 		"\64\67\3\2\2\2\65\63\3\2\2\2\65\66\3\2\2\2\66\26\3\2\2\2\67\65\3\2\2\2"+
r 124 		"8<\t\4\2\29;\t\4\2\2:9\3\2\2\2;>\3\2\2\2<:\3\2\2\2<=\3\2\2\2=\30\3\2\2"+
r 125 		"\2><\3\2\2\2?@\t\5\2\2@A\3\2\2\2AB\b\r\2\2B\32\3\2\2\2\6\2\63\65<\3\b"+
r 126 		"\2\2";
--[ 2019.03.10.14.04.50.087.0 ]--
:/gen/AntlrActionsParser.java
r 20 		ID=10, NUM=11, WS=12;
+ 39 			null, null, null, null, null, null, null, null, null, null, "ID", "NUM", 
r 40 			"WS"
r 542 		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\16C\4\2\t\2\4\3\t"+
--[ 2019.03.10.14.04.55.716.0 ]--
:/src/ActionsTest.java
r 9         CharStream input = CharStreams.fromFileName(".input.txt");
--[ 2019.03.10.14.04.55.778.0 ]--
r 9         CharStream input = CharStreams.fromFileName("./input.txt");
--[ 2019.03.10.14.05.06.990.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.03.10.14.05.46.017.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.03.10.14.06.33.116.0 ]--
r 9         CharStream input = CharStreams.fromFileName(".input.txt");
--[ 2019.03.10.14.06.33.265.0 ]--
r 9         CharStream input = CharStreams.fromFileName("input.txt");
--[ 2019.03.10.14.06.41.235.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.03.10.14.06.59.595.0 ]--
r 9         CharStream input = CharStreams.fromFileName(".input.txt");
--[ 2019.03.10.14.06.59.759.0 ]--
r 9         CharStream input = CharStreams.fromFileName("..input.txt");
--[ 2019.03.10.14.06.59.837.0 ]--
r 9         CharStream input = CharStreams.fromFileName("../input.txt");
--[ 2019.03.10.14.07.08.649.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.03.10.14.07.53.109.0 ]--
r 9         CharStream input = CharStreams.fromFileName("../input.txt");/input.txt");
--[ 2019.03.10.14.07.53.357.0 ]--
r 9         CharStream input = CharStreams.fromFileName("../input.txt");
--[ 2019.03.10.14.07.56.510.0 ]--
r 9         CharStream input = CharStreams.fromFileName("..input.txt");
--[ 2019.03.10.14.07.56.668.0 ]--
r 9         CharStream input = CharStreams.fromFileName(".input.txt");
--[ 2019.03.10.14.07.56.856.0 ]--
r 9         CharStream input = CharStreams.fromFileName("input.txt");
--[ 2019.03.10.14.08.22.285.0 ]--
r 10         console.log(input);
--[ 2019.03.10.14.08.24.735.0 ]--
r 10         
--[ 2019.03.10.14.08.24.844.0 ]--
r 10         y
--[ 2019.03.10.14.08.24.963.0 ]--
r 10         ys
--[ 2019.03.10.14.08.25.073.0 ]--
r 10         yst
--[ 2019.03.10.14.08.25.163.0 ]--
r 10         yste
--[ 2019.03.10.14.08.25.288.0 ]--
r 10         ystem
--[ 2019.03.10.14.08.25.633.0 ]--
r 10         yste
--[ 2019.03.10.14.08.25.790.0 ]--
r 10         yst
--[ 2019.03.10.14.08.25.931.0 ]--
r 10         ys
--[ 2019.03.10.14.08.26.088.0 ]--
r 10         y
--[ 2019.03.10.14.08.26.229.0 ]--
r 10         
--[ 2019.03.10.14.08.26.562.0 ]--
r 10         S
--[ 2019.03.10.14.08.26.984.0 ]--
r 10         Sy
--[ 2019.03.10.14.08.27.130.0 ]--
r 10         Sys
--[ 2019.03.10.14.08.27.255.0 ]--
r 10         Syst
--[ 2019.03.10.14.08.27.359.0 ]--
r 10         Syste
--[ 2019.03.10.14.08.27.475.0 ]--
r 10         System
--[ 2019.03.10.14.08.28.216.0 ]--
r 10         System.
--[ 2019.03.10.14.08.28.472.0 ]--
r 10         System.o
--[ 2019.03.10.14.08.28.563.0 ]--
r 10         System.ou
--[ 2019.03.10.14.08.28.657.0 ]--
r 10         System.out
--[ 2019.03.10.14.08.29.159.0 ]--
r 10         System.out.
--[ 2019.03.10.14.08.29.330.0 ]--
r 10         System.out.p
--[ 2019.03.10.14.08.29.444.0 ]--
r 10         System.out.pr
--[ 2019.03.10.14.08.29.623.0 ]--
r 10         System.out.pri
--[ 2019.03.10.14.08.29.748.0 ]--
r 10         System.out.prin
--[ 2019.03.10.14.08.29.921.0 ]--
r 10         System.out.print
--[ 2019.03.10.14.08.30.915.0 ]--
r 10         System.out.printn
--[ 2019.03.10.14.08.31.016.0 ]--
r 10         System.out.printnl
--[ 2019.03.10.14.08.31.611.0 ]--
r 10         System.out.printn
--[ 2019.03.10.14.08.31.763.0 ]--
r 10         System.out.print
--[ 2019.03.10.14.08.31.979.0 ]--
r 10         System.out.printl
--[ 2019.03.10.14.08.32.075.0 ]--
r 10         System.out.println
--[ 2019.03.10.14.08.32.472.0 ]--
r 10         System.out.println()
--[ 2019.03.10.14.08.33.181.0 ]--
r 10         System.out.println(i)
--[ 2019.03.10.14.08.33.311.0 ]--
r 10         System.out.println(in)
--[ 2019.03.10.14.08.33.427.0 ]--
r 10         System.out.println(inp)
--[ 2019.03.10.14.08.33.525.0 ]--
r 10         System.out.println(inpu)
--[ 2019.03.10.14.08.33.603.0 ]--
r 10         System.out.println(input)
--[ 2019.03.10.14.08.34.888.0 ]--
r 10         System.out.println(input);
--[ 2019.03.10.14.08.43.391.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.03.10.14.09.49.167.0 ]--
:/AntlrActions.g4
r 13 WS : [ \t\r\n] -> skip;
--[ 2019.03.10.14.09.54.861.0 ]--
:/gen/AntlrActions.interp
+ 12 null
+ 29 WS
r 42 [3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 3, 14, 67, 4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7, 9, 7, 4, 8, 9, 8, 3, 2, 3, 2, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 3, 25, 10, 3, 3, 4, 3, 4, 3, 4, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 5, 39, 10, 5, 3, 6, 3, 6, 3, 6, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 5, 7, 57, 10, 7, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 5, 8, 65, 10, 8, 3, 8, 2, 2, 9, 2, 4, 6, 8, 10, 12, 14, 2, 2, 2, 67, 2, 16, 3, 2, 2, 2, 4, 24, 3, 2, 2, 2, 6, 26, 3, 2, 2, 2, 8, 38, 3, 2, 2, 2, 10, 40, 3, 2, 2, 2, 12, 56, 3, 2, 2, 2, 14, 64, 3, 2, 2, 2, 16, 17, 5, 4, 3, 2, 17, 18, 7, 3, 2, 2, 18, 3, 3, 2, 2, 2, 19, 20, 5, 6, 4, 2, 20, 21, 7, 4, 2, 2, 21, 22, 5, 4, 3, 2, 22, 25, 3, 2, 2, 2, 23, 25, 3, 2, 2, 2, 24, 19, 3, 2, 2, 2, 24, 23, 3, 2, 2, 2, 25, 5, 3, 2, 2, 2, 26, 27, 5, 10, 6, 2, 27, 28, 5, 8, 5, 2, 28, 7, 3, 2, 2, 2, 29, 30, 7, 5, 2, 2, 30, 31, 5, 10, 6, 2, 31, 32, 5, 8, 5, 2, 32, 39, 3, 2, 2, 2, 33, 34, 7, 6, 2, 2, 34, 35, 5, 10, 6, 2, 35, 36, 5, 8, 5, 2, 36, 39, 3, 2, 2, 2, 37, 39, 3, 2, 2, 2, 38, 29, 3, 2, 2, 2, 38, 33, 3, 2, 2, 2, 38, 37, 3, 2, 2, 2, 39, 9, 3, 2, 2, 2, 40, 41, 5, 14, 8, 2, 41, 42, 5, 12, 7, 2, 42, 11, 3, 2, 2, 2, 43, 44, 7, 7, 2, 2, 44, 45, 5, 14, 8, 2, 45, 46, 5, 12, 7, 2, 46, 57, 3, 2, 2, 2, 47, 48, 7, 8, 2, 2, 48, 49, 5, 14, 8, 2, 49, 50, 5, 12, 7, 2, 50, 57, 3, 2, 2, 2, 51, 52, 7, 9, 2, 2, 52, 53, 5, 14, 8, 2, 53, 54, 5, 12, 7, 2, 54, 57, 3, 2, 2, 2, 55, 57, 3, 2, 2, 2, 56, 43, 3, 2, 2, 2, 56, 47, 3, 2, 2, 2, 56, 51, 3, 2, 2, 2, 56, 55, 3, 2, 2, 2, 57, 13, 3, 2, 2, 2, 58, 59, 7, 10, 2, 2, 59, 60, 5, 6, 4, 2, 60, 61, 7, 11, 2, 2, 61, 65, 3, 2, 2, 2, 62, 65, 7, 12, 2, 2, 63, 65, 7, 13, 2, 2, 64, 58, 3, 2, 2, 2, 64, 62, 3, 2, 2, 2, 64, 63, 3, 2, 2, 2, 65, 15, 3, 2, 2, 2, 6, 24, 38, 56, 64]
--[ 2019.03.10.14.09.55.002.0 ]--
:/gen/AntlrActionsLexer.java
r 114 		"|\5\2\62;C\\c|\3\2\62;\5\2\13\f\17\17\"\"\2D\2\3\3\2\2\2\2\5\3\2\2\2\2"+
r 115 		"\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2"+
r 116 		"\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\3\33\3\2\2\2"+
r 117 		"\5\37\3\2\2\2\7!\3\2\2\2\t#\3\2\2\2\13%\3\2\2\2\r\'\3\2\2\2\17)\3\2\2"+
r 118 		"\2\21-\3\2\2\2\23/\3\2\2\2\25\61\3\2\2\2\278\3\2\2\2\31?\3\2\2\2\33\34"+
r 119 		"\7G\2\2\34\35\7Q\2\2\35\36\7H\2\2\36\4\3\2\2\2\37 \7=\2\2 \6\3\2\2\2!"+
r 120 		"\"\7-\2\2\"\b\3\2\2\2#$\7/\2\2$\n\3\2\2\2%&\7,\2\2&\f\3\2\2\2\'(\7\61"+
r 121 		"\2\2(\16\3\2\2\2)*\7O\2\2*+\7Q\2\2+,\7F\2\2,\20\3\2\2\2-.\7*\2\2.\22\3"+
r 122 		"\2\2\2/\60\7+\2\2\60\24\3\2\2\2\61\65\t\2\2\2\62\64\t\3\2\2\63\62\3\2"+
r 123 		"\2\2\64\67\3\2\2\2\65\63\3\2\2\2\65\66\3\2\2\2\66\26\3\2\2\2\67\65\3\2"+
r 124 		"\2\28<\t\4\2\29;\t\4\2\2:9\3\2\2\2;>\3\2\2\2<:\3\2\2\2<=\3\2\2\2=\30\3"+
r 125 		"\2\2\2><\3\2\2\2?@\t\5\2\2@A\3\2\2\2AB\b\r\2\2B\32\3\2\2\2\6\2\63\65<"+
r 126 		"\3\b\2\2";
--[ 2019.03.10.14.09.55.267.0 ]--
:/gen/AntlrActionsLexer.interp
r 53 [3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 2, 14, 67, 8, 1, 4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7, 9, 7, 4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12, 4, 13, 9, 13, 3, 2, 3, 2, 3, 2, 3, 2, 3, 3, 3, 3, 3, 4, 3, 4, 3, 5, 3, 5, 3, 6, 3, 6, 3, 7, 3, 7, 3, 8, 3, 8, 3, 8, 3, 8, 3, 9, 3, 9, 3, 10, 3, 10, 3, 11, 3, 11, 7, 11, 52, 10, 11, 12, 11, 14, 11, 55, 11, 11, 3, 12, 3, 12, 7, 12, 59, 10, 12, 12, 12, 14, 12, 62, 11, 12, 3, 13, 3, 13, 3, 13, 3, 13, 2, 2, 14, 3, 3, 5, 4, 7, 5, 9, 6, 11, 7, 13, 8, 15, 9, 17, 10, 19, 11, 21, 12, 23, 13, 25, 14, 3, 2, 6, 4, 2, 67, 92, 99, 124, 5, 2, 50, 59, 67, 92, 99, 124, 3, 2, 50, 59, 5, 2, 11, 12, 15, 15, 34, 34, 2, 68, 2, 3, 3, 2, 2, 2, 2, 5, 3, 2, 2, 2, 2, 7, 3, 2, 2, 2, 2, 9, 3, 2, 2, 2, 2, 11, 3, 2, 2, 2, 2, 13, 3, 2, 2, 2, 2, 15, 3, 2, 2, 2, 2, 17, 3, 2, 2, 2, 2, 19, 3, 2, 2, 2, 2, 21, 3, 2, 2, 2, 2, 23, 3, 2, 2, 2, 2, 25, 3, 2, 2, 2, 3, 27, 3, 2, 2, 2, 5, 31, 3, 2, 2, 2, 7, 33, 3, 2, 2, 2, 9, 35, 3, 2, 2, 2, 11, 37, 3, 2, 2, 2, 13, 39, 3, 2, 2, 2, 15, 41, 3, 2, 2, 2, 17, 45, 3, 2, 2, 2, 19, 47, 3, 2, 2, 2, 21, 49, 3, 2, 2, 2, 23, 56, 3, 2, 2, 2, 25, 63, 3, 2, 2, 2, 27, 28, 7, 71, 2, 2, 28, 29, 7, 81, 2, 2, 29, 30, 7, 72, 2, 2, 30, 4, 3, 2, 2, 2, 31, 32, 7, 61, 2, 2, 32, 6, 3, 2, 2, 2, 33, 34, 7, 45, 2, 2, 34, 8, 3, 2, 2, 2, 35, 36, 7, 47, 2, 2, 36, 10, 3, 2, 2, 2, 37, 38, 7, 44, 2, 2, 38, 12, 3, 2, 2, 2, 39, 40, 7, 49, 2, 2, 40, 14, 3, 2, 2, 2, 41, 42, 7, 79, 2, 2, 42, 43, 7, 81, 2, 2, 43, 44, 7, 70, 2, 2, 44, 16, 3, 2, 2, 2, 45, 46, 7, 42, 2, 2, 46, 18, 3, 2, 2, 2, 47, 48, 7, 43, 2, 2, 48, 20, 3, 2, 2, 2, 49, 53, 9, 2, 2, 2, 50, 52, 9, 3, 2, 2, 51, 50, 3, 2, 2, 2, 52, 55, 3, 2, 2, 2, 53, 51, 3, 2, 2, 2, 53, 54, 3, 2, 2, 2, 54, 22, 3, 2, 2, 2, 55, 53, 3, 2, 2, 2, 56, 60, 9, 4, 2, 2, 57, 59, 9, 4, 2, 2, 58, 57, 3, 2, 2, 2, 59, 62, 3, 2, 2, 2, 60, 58, 3, 2, 2, 2, 60, 61, 3, 2, 2, 2, 61, 24, 3, 2, 2, 2, 62, 60, 3, 2, 2, 2, 63, 64, 9, 5, 2, 2, 64, 65, 3, 2, 2, 2, 65, 66, 8, 13, 2, 2, 66, 26, 3, 2, 2, 2, 6, 2, 51, 53, 60, 3, 8, 2, 2]
--[ 2019.03.10.14.10.05.011.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.03.10.14.11.27.978.0 ]--
:/input.txt
r 3     3); 4*5 MOD; EOF
--[ 2019.03.10.14.11.30.179.0 ]--
r 3     3); 4*5 MOD ; EOF
--[ 2019.03.10.14.11.31.852.0 ]--
r 3     3); 4*5 MOD 5; EOF
--[ 2019.03.10.14.11.35.534.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.03.10.14.13.13.232.0 ]--
:/AntlrActions.g4
r 3 start : list 'EOF' ;
--[ 2019.03.10.14.13.15.917.0 ]--
r 3 start : list 'EOF' {System.out.println("found a decl");};
--[ 2019.03.10.14.13.27.521.0 ]--
r 3 start : list 'EOF' {System.out.println("found a dec");};
--[ 2019.03.10.14.13.28.016.0 ]--
r 3 start : list 'EOF' {System.out.println("found a de");};
--[ 2019.03.10.14.13.28.101.0 ]--
r 3 start : list 'EOF' {System.out.println("found a ");};
--[ 2019.03.10.14.13.28.147.0 ]--
r 3 start : list 'EOF' {System.out.println("found ");};
--[ 2019.03.10.14.13.28.194.0 ]--
r 3 start : list 'EOF' {System.out.println("found");};
--[ 2019.03.10.14.13.28.241.0 ]--
r 3 start : list 'EOF' {System.out.println("fou");};
--[ 2019.03.10.14.13.28.412.0 ]--
r 3 start : list 'EOF' {System.out.println("fo");};
--[ 2019.03.10.14.13.28.563.0 ]--
r 3 start : list 'EOF' {System.out.println("f");};
--[ 2019.03.10.14.13.28.823.0 ]--
r 3 start : list 'EOF' {System.out.println("");};
--[ 2019.03.10.14.13.29.301.0 ]--
r 3 start : list 'EOF' {System.out.println("E");};
--[ 2019.03.10.14.13.29.437.0 ]--
r 3 start : list 'EOF' {System.out.println("EO");};
--[ 2019.03.10.14.13.29.543.0 ]--
r 3 start : list 'EOF' {System.out.println("EOF");};
--[ 2019.03.10.14.13.46.780.0 ]--
r 4 list : expr ';'  list | ;
--[ 2019.03.10.14.13.48.997.0 ]--
r 4 list : expr ';' {System.out.println("found a decl");} list | ;
--[ 2019.03.10.14.13.51.301.0 ]--
r 4 list : expr ';' {System.out.println("found a dec");} list | ;
--[ 2019.03.10.14.13.51.477.0 ]--
r 4 list : expr ';' {System.out.println("found a de");} list | ;
--[ 2019.03.10.14.13.51.636.0 ]--
r 4 list : expr ';' {System.out.println("found a d");} list | ;
--[ 2019.03.10.14.13.51.800.0 ]--
r 4 list : expr ';' {System.out.println("found a ");} list | ;
--[ 2019.03.10.14.13.51.927.0 ]--
r 4 list : expr ';' {System.out.println("found a");} list | ;
--[ 2019.03.10.14.13.52.059.0 ]--
r 4 list : expr ';' {System.out.println("found ");} list | ;
--[ 2019.03.10.14.13.52.225.0 ]--
r 4 list : expr ';' {System.out.println("found");} list | ;
--[ 2019.03.10.14.13.52.347.0 ]--
r 4 list : expr ';' {System.out.println("foun");} list | ;
--[ 2019.03.10.14.13.52.494.0 ]--
r 4 list : expr ';' {System.out.println("fou");} list | ;
--[ 2019.03.10.14.13.52.635.0 ]--
r 4 list : expr ';' {System.out.println("fo");} list | ;
--[ 2019.03.10.14.13.52.781.0 ]--
r 4 list : expr ';' {System.out.println("f");} list | ;
--[ 2019.03.10.14.13.53.132.0 ]--
r 4 list : expr ';' {System.out.println("");} list | ;
--[ 2019.03.10.14.13.54.395.0 ]--
r 4 list : expr ';' {System.out.println(";");} list | ;
--[ 2019.03.10.14.14.06.672.0 ]--
r 6 terms : '+' term  terms | '-' term terms | ;
--[ 2019.03.10.14.14.11.314.0 ]--
r 6 terms : '+' term {System.out.println("found a decl");} terms | '-' term terms | ;
--[ 2019.03.10.14.14.13.866.0 ]--
r 6 terms : '+' term {System.out.println("found a dec");} terms | '-' term terms | ;
--[ 2019.03.10.14.14.14.115.0 ]--
r 6 terms : '+' term {System.out.println("found a de");} terms | '-' term terms | ;
--[ 2019.03.10.14.14.14.349.0 ]--
r 6 terms : '+' term {System.out.println("found a d");} terms | '-' term terms | ;
--[ 2019.03.10.14.14.14.499.0 ]--
r 6 terms : '+' term {System.out.println("found a ");} terms | '-' term terms | ;
--[ 2019.03.10.14.14.14.651.0 ]--
r 6 terms : '+' term {System.out.println("found a");} terms | '-' term terms | ;
--[ 2019.03.10.14.14.14.794.0 ]--
r 6 terms : '+' term {System.out.println("found ");} terms | '-' term terms | ;
--[ 2019.03.10.14.14.14.985.0 ]--
r 6 terms : '+' term {System.out.println("found");} terms | '-' term terms | ;
--[ 2019.03.10.14.14.15.133.0 ]--
r 6 terms : '+' term {System.out.println("foun");} terms | '-' term terms | ;
--[ 2019.03.10.14.14.15.293.0 ]--
r 6 terms : '+' term {System.out.println("fou");} terms | '-' term terms | ;
--[ 2019.03.10.14.14.15.443.0 ]--
r 6 terms : '+' term {System.out.println("fo");} terms | '-' term terms | ;
--[ 2019.03.10.14.14.15.604.0 ]--
r 6 terms : '+' term {System.out.println("f");} terms | '-' term terms | ;
--[ 2019.03.10.14.14.15.794.0 ]--
r 6 terms : '+' term {System.out.println("");} terms | '-' term terms | ;
--[ 2019.03.10.14.14.16.301.0 ]--
r 6 terms : '+' term {System.out.println("+");} terms | '-' term terms | ;
--[ 2019.03.10.14.14.23.067.0 ]--
r 6 terms : '+' term {System.out.println("+");} terms | '-' term  terms | ;
--[ 2019.03.10.14.14.24.590.0 ]--
r 6 terms : '+' term {System.out.println("+");} terms | '-' term terms | ;
--[ 2019.03.10.14.14.27.156.0 ]--
r 6 terms : '+' term {System.out.println("+");} terms | '-' term {System.out.println("found a decl");}terms | ;
--[ 2019.03.10.14.14.28.236.0 ]--
r 6 terms : '+' term {System.out.println("+");} terms | '-' term {System.out.println("found a decl");} terms | ;
--[ 2019.03.10.14.14.30.532.0 ]--
r 6 terms : '+' term {System.out.println("+");} terms | '-' term {System.out.println("found a dec");} terms | ;
--[ 2019.03.10.14.14.30.698.0 ]--
r 6 terms : '+' term {System.out.println("+");} terms | '-' term {System.out.println("found a de");} terms | ;
--[ 2019.03.10.14.14.30.796.0 ]--
r 6 terms : '+' term {System.out.println("+");} terms | '-' term {System.out.println("found a d");} terms | ;
--[ 2019.03.10.14.14.30.952.0 ]--
r 6 terms : '+' term {System.out.println("+");} terms | '-' term {System.out.println("found a ");} terms | ;
--[ 2019.03.10.14.14.31.093.0 ]--
r 6 terms : '+' term {System.out.println("+");} terms | '-' term {System.out.println("found a");} terms | ;
--[ 2019.03.10.14.14.31.225.0 ]--
r 6 terms : '+' term {System.out.println("+");} terms | '-' term {System.out.println("found ");} terms | ;
--[ 2019.03.10.14.14.31.391.0 ]--
r 6 terms : '+' term {System.out.println("+");} terms | '-' term {System.out.println("found");} terms | ;
--[ 2019.03.10.14.14.31.521.0 ]--
r 6 terms : '+' term {System.out.println("+");} terms | '-' term {System.out.println("foun");} terms | ;
--[ 2019.03.10.14.14.31.748.0 ]--
r 6 terms : '+' term {System.out.println("+");} terms | '-' term {System.out.println("fou");} terms | ;
--[ 2019.03.10.14.14.31.795.0 ]--
r 6 terms : '+' term {System.out.println("+");} terms | '-' term {System.out.println("fo");} terms | ;
--[ 2019.03.10.14.14.31.936.0 ]--
r 6 terms : '+' term {System.out.println("+");} terms | '-' term {System.out.println("f");} terms | ;
--[ 2019.03.10.14.14.32.370.0 ]--
r 6 terms : '+' term {System.out.println("+");} terms | '-' term {System.out.println("");} terms | ;
--[ 2019.03.10.14.14.34.017.0 ]--
r 6 terms : '+' term {System.out.println("+");} terms | '-' term {System.out.println("-");} terms | ;
--[ 2019.03.10.14.16.09.732.0 ]--
r 8 factors : '*' factor {System.out.println("found a decl");}factors | '/' factor factors | 'MOD' factor factors | ;
--[ 2019.03.10.14.16.10.774.0 ]--
r 8 factors : '*' factor {System.out.println("found a decl");} factors | '/' factor factors | 'MOD' factor factors | ;
--[ 2019.03.10.14.16.14.556.0 ]--
r 8 factors : '*' factor {System.out.println("found a decl");} factors | '/' factor {System.out.println("found a decl");}factors | 'MOD' factor factors | ;
--[ 2019.03.10.14.16.16.319.0 ]--
r 8 factors : '*' factor {System.out.println("found a decl");} factors | '/' factor {System.out.println("found a decl");} factors | 'MOD' factor factors | ;
--[ 2019.03.10.14.16.18.189.0 ]--
r 8 factors : '*' factor {System.out.println("found a decl");} factors | '/' factor {System.out.println("found a dec");} factors | 'MOD' factor factors | ;
--[ 2019.03.10.14.16.18.332.0 ]--
r 8 factors : '*' factor {System.out.println("found a decl");} factors | '/' factor {System.out.println("found a de");} factors | 'MOD' factor factors | ;
--[ 2019.03.10.14.16.18.486.0 ]--
r 8 factors : '*' factor {System.out.println("found a decl");} factors | '/' factor {System.out.println("found a d");} factors | 'MOD' factor factors | ;
--[ 2019.03.10.14.16.18.642.0 ]--
r 8 factors : '*' factor {System.out.println("found a decl");} factors | '/' factor {System.out.println("found a ");} factors | 'MOD' factor factors | ;
--[ 2019.03.10.14.16.18.769.0 ]--
r 8 factors : '*' factor {System.out.println("found a decl");} factors | '/' factor {System.out.println("found a");} factors | 'MOD' factor factors | ;
--[ 2019.03.10.14.16.18.927.0 ]--
r 8 factors : '*' factor {System.out.println("found a decl");} factors | '/' factor {System.out.println("found ");} factors | 'MOD' factor factors | ;
--[ 2019.03.10.14.16.19.067.0 ]--
r 8 factors : '*' factor {System.out.println("found a decl");} factors | '/' factor {System.out.println("found");} factors | 'MOD' factor factors | ;
--[ 2019.03.10.14.16.19.230.0 ]--
r 8 factors : '*' factor {System.out.println("found a decl");} factors | '/' factor {System.out.println("foun");} factors | 'MOD' factor factors | ;
--[ 2019.03.10.14.16.19.368.0 ]--
r 8 factors : '*' factor {System.out.println("found a decl");} factors | '/' factor {System.out.println("fou");} factors | 'MOD' factor factors | ;
--[ 2019.03.10.14.16.19.528.0 ]--
r 8 factors : '*' factor {System.out.println("found a decl");} factors | '/' factor {System.out.println("fo");} factors | 'MOD' factor factors | ;
--[ 2019.03.10.14.16.19.660.0 ]--
r 8 factors : '*' factor {System.out.println("found a decl");} factors | '/' factor {System.out.println("f");} factors | 'MOD' factor factors | ;
--[ 2019.03.10.14.16.19.931.0 ]--
r 8 factors : '*' factor {System.out.println("found a decl");} factors | '/' factor {System.out.println("");} factors | 'MOD' factor factors | ;
--[ 2019.03.10.14.16.23.620.0 ]--
r 8 factors : '*' factor {System.out.println("found a decl");} factors | '/' factor {System.out.println("/");} factors | 'MOD' factor factors | ;
--[ 2019.03.10.14.16.27.634.0 ]--
r 8 factors : '*' factor {System.out.println("found a dec");} factors | '/' factor {System.out.println("/");} factors | 'MOD' factor factors | ;
--[ 2019.03.10.14.16.27.767.0 ]--
r 8 factors : '*' factor {System.out.println("found a de");} factors | '/' factor {System.out.println("/");} factors | 'MOD' factor factors | ;
--[ 2019.03.10.14.16.27.928.0 ]--
r 8 factors : '*' factor {System.out.println("found a d");} factors | '/' factor {System.out.println("/");} factors | 'MOD' factor factors | ;
--[ 2019.03.10.14.16.28.074.0 ]--
r 8 factors : '*' factor {System.out.println("found a ");} factors | '/' factor {System.out.println("/");} factors | 'MOD' factor factors | ;
--[ 2019.03.10.14.16.28.240.0 ]--
r 8 factors : '*' factor {System.out.println("found a");} factors | '/' factor {System.out.println("/");} factors | 'MOD' factor factors | ;
--[ 2019.03.10.14.16.28.665.0 ]--
r 8 factors : '*' factor {System.out.println("found ");} factors | '/' factor {System.out.println("/");} factors | 'MOD' factor factors | ;
--[ 2019.03.10.14.16.28.838.0 ]--
r 8 factors : '*' factor {System.out.println("found");} factors | '/' factor {System.out.println("/");} factors | 'MOD' factor factors | ;
--[ 2019.03.10.14.16.28.993.0 ]--
r 8 factors : '*' factor {System.out.println("foun");} factors | '/' factor {System.out.println("/");} factors | 'MOD' factor factors | ;
--[ 2019.03.10.14.16.29.221.0 ]--
r 8 factors : '*' factor {System.out.println("fou");} factors | '/' factor {System.out.println("/");} factors | 'MOD' factor factors | ;
--[ 2019.03.10.14.16.29.405.0 ]--
r 8 factors : '*' factor {System.out.println("fo");} factors | '/' factor {System.out.println("/");} factors | 'MOD' factor factors | ;
--[ 2019.03.10.14.16.29.878.0 ]--
r 8 factors : '*' factor {System.out.println("f");} factors | '/' factor {System.out.println("/");} factors | 'MOD' factor factors | ;
--[ 2019.03.10.14.16.30.292.0 ]--
r 8 factors : '*' factor {System.out.println("");} factors | '/' factor {System.out.println("/");} factors | 'MOD' factor factors | ;
--[ 2019.03.10.14.16.34.400.0 ]--
r 8 factors : '*' factor {System.out.println("*");} factors | '/' factor {System.out.println("/");} factors | 'MOD' factor factors | ;
--[ 2019.03.10.14.16.53.721.0 ]--
r 8 factors : '*' factor {System.out.println("*");} factors | '/' factor {System.out.println("/");} factors | 'MOD' factor {System.out.println("found a decl");}factors | ;
--[ 2019.03.10.14.16.57.729.0 ]--
r 8 factors : '*' factor {System.out.println("*");} factors | '/' factor {System.out.println("/");} factors | 'MOD' factor {System.out.println("found a decl");} factors | ;
--[ 2019.03.10.14.16.59.589.0 ]--
r 8 factors : '*' factor {System.out.println("*");} factors | '/' factor {System.out.println("/");} factors | 'MOD' factor {System.out.println("found a dec");} factors | ;
--[ 2019.03.10.14.17.00.072.0 ]--
r 8 factors : '*' factor {System.out.println("*");} factors | '/' factor {System.out.println("/");} factors | 'MOD' factor {System.out.println("found a de");} factors | ;
--[ 2019.03.10.14.17.00.116.0 ]--
r 8 factors : '*' factor {System.out.println("*");} factors | '/' factor {System.out.println("/");} factors | 'MOD' factor {System.out.println("found a d");} factors | ;
--[ 2019.03.10.14.17.00.176.0 ]--
r 8 factors : '*' factor {System.out.println("*");} factors | '/' factor {System.out.println("/");} factors | 'MOD' factor {System.out.println("found a");} factors | ;
--[ 2019.03.10.14.17.00.220.0 ]--
r 8 factors : '*' factor {System.out.println("*");} factors | '/' factor {System.out.println("/");} factors | 'MOD' factor {System.out.println("found ");} factors | ;
--[ 2019.03.10.14.17.00.288.0 ]--
r 8 factors : '*' factor {System.out.println("*");} factors | '/' factor {System.out.println("/");} factors | 'MOD' factor {System.out.println("foun");} factors | ;
--[ 2019.03.10.14.17.00.333.0 ]--
r 8 factors : '*' factor {System.out.println("*");} factors | '/' factor {System.out.println("/");} factors | 'MOD' factor {System.out.println("fo");} factors | ;
--[ 2019.03.10.14.17.00.526.0 ]--
r 8 factors : '*' factor {System.out.println("*");} factors | '/' factor {System.out.println("/");} factors | 'MOD' factor {System.out.println("f");} factors | ;
--[ 2019.03.10.14.17.01.010.0 ]--
r 8 factors : '*' factor {System.out.println("*");} factors | '/' factor {System.out.println("/");} factors | 'MOD' factor {System.out.println("");} factors | ;
--[ 2019.03.10.14.17.02.517.0 ]--
r 8 factors : '*' factor {System.out.println("*");} factors | '/' factor {System.out.println("/");} factors | 'MOD' factor {System.out.println("M");} factors | ;
--[ 2019.03.10.14.17.02.665.0 ]--
r 8 factors : '*' factor {System.out.println("*");} factors | '/' factor {System.out.println("/");} factors | 'MOD' factor {System.out.println("MO");} factors | ;
--[ 2019.03.10.14.17.02.765.0 ]--
r 8 factors : '*' factor {System.out.println("*");} factors | '/' factor {System.out.println("/");} factors | 'MOD' factor {System.out.println("MOD");} factors | ;
--[ 2019.03.10.14.17.50.163.0 ]--
r 9 factor : '(' expr ')' | ID {System.out.println("found a decl");}| NUM;
--[ 2019.03.10.14.17.50.409.0 ]--
r 9 factor : '(' expr ')' | ID {System.out.println("found a decl");} | NUM;
--[ 2019.03.10.14.17.53.217.0 ]--
r 9 factor : '(' expr ')' | ID {System.out.println("found a dec");} | NUM;
--[ 2019.03.10.14.17.53.421.0 ]--
r 9 factor : '(' expr ')' | ID {System.out.println("found a de");} | NUM;
--[ 2019.03.10.14.17.53.565.0 ]--
r 9 factor : '(' expr ')' | ID {System.out.println("found a d");} | NUM;
--[ 2019.03.10.14.17.53.732.0 ]--
r 9 factor : '(' expr ')' | ID {System.out.println("found a ");} | NUM;
--[ 2019.03.10.14.17.53.933.0 ]--
r 9 factor : '(' expr ')' | ID {System.out.println("found a");} | NUM;
--[ 2019.03.10.14.17.54.090.0 ]--
r 9 factor : '(' expr ')' | ID {System.out.println("found ");} | NUM;
--[ 2019.03.10.14.17.54.285.0 ]--
r 9 factor : '(' expr ')' | ID {System.out.println("found");} | NUM;
--[ 2019.03.10.14.17.54.460.0 ]--
r 9 factor : '(' expr ')' | ID {System.out.println("foun");} | NUM;
--[ 2019.03.10.14.17.54.651.0 ]--
r 9 factor : '(' expr ')' | ID {System.out.println("fou");} | NUM;
--[ 2019.03.10.14.17.54.848.0 ]--
r 9 factor : '(' expr ')' | ID {System.out.println("fo");} | NUM;
--[ 2019.03.10.14.17.55.281.0 ]--
r 9 factor : '(' expr ')' | ID {System.out.println("f");} | NUM;
--[ 2019.03.10.14.17.55.647.0 ]--
r 9 factor : '(' expr ')' | ID {System.out.println("");} | NUM;
--[ 2019.03.10.14.18.13.525.0 ]--
r 9 factor : '(' expr ')' | ID {System.out.println(");} | NUM;
--[ 2019.03.10.14.18.13.719.0 ]--
r 9 factor : '(' expr ')' | ID {System.out.println();} | NUM;
--[ 2019.03.10.14.18.14.683.0 ]--
r 9 factor : '(' expr ')' | ID {System.out.println($);} | NUM;
--[ 2019.03.10.14.18.14.959.0 ]--
r 9 factor : '(' expr ')' | ID {System.out.println($I);} | NUM;
--[ 2019.03.10.14.18.15.068.0 ]--
r 9 factor : '(' expr ')' | ID {System.out.println($ID);} | NUM;
--[ 2019.03.10.14.18.15.648.0 ]--
r 9 factor : '(' expr ')' | ID {System.out.println($ID.);} | NUM;
--[ 2019.03.10.14.18.15.842.0 ]--
r 9 factor : '(' expr ')' | ID {System.out.println($ID.t);} | NUM;
--[ 2019.03.10.14.18.15.936.0 ]--
r 9 factor : '(' expr ')' | ID {System.out.println($ID.te);} | NUM;
--[ 2019.03.10.14.18.16.233.0 ]--
r 9 factor : '(' expr ')' | ID {System.out.println($ID.tex);} | NUM;
--[ 2019.03.10.14.18.16.402.0 ]--
r 9 factor : '(' expr ')' | ID {System.out.println($ID.text);} | NUM;
--[ 2019.03.10.14.18.18.871.0 ]--
r 9 factor : '(' expr ')' | ID {System.out.println($ID.text);} | NUM ;
--[ 2019.03.10.14.18.25.441.0 ]--
r 9 factor : '(' expr ')' | ID {System.out.println($ID.text);} | NUM {System.out.println("found a decl");};
--[ 2019.03.10.14.18.27.135.0 ]--
r 9 factor : '(' expr ')' | ID {System.out.println($ID.text);} | NUM {System.out.println("found a decl");} ;
--[ 2019.03.10.14.18.28.234.0 ]--
r 9 factor : '(' expr ')' | ID {System.out.println($ID.text);} | NUM {System.out.println("found a decl");};
--[ 2019.03.10.14.18.30.736.0 ]--
r 9 factor : '(' expr ')' | ID {System.out.println($ID.text);} | NUM {System.out.println("found a decl);};
--[ 2019.03.10.14.18.30.897.0 ]--
r 9 factor : '(' expr ')' | ID {System.out.println($ID.text);} | NUM {System.out.println("found a dec);};
--[ 2019.03.10.14.18.31.016.0 ]--
r 9 factor : '(' expr ')' | ID {System.out.println($ID.text);} | NUM {System.out.println("found a de);};
--[ 2019.03.10.14.18.31.195.0 ]--
r 9 factor : '(' expr ')' | ID {System.out.println($ID.text);} | NUM {System.out.println("found a d);};
--[ 2019.03.10.14.18.31.325.0 ]--
r 9 factor : '(' expr ')' | ID {System.out.println($ID.text);} | NUM {System.out.println("found a );};
--[ 2019.03.10.14.18.31.457.0 ]--
r 9 factor : '(' expr ')' | ID {System.out.println($ID.text);} | NUM {System.out.println("found a);};
--[ 2019.03.10.14.18.31.610.0 ]--
r 9 factor : '(' expr ')' | ID {System.out.println($ID.text);} | NUM {System.out.println("found );};
--[ 2019.03.10.14.18.31.758.0 ]--
r 9 factor : '(' expr ')' | ID {System.out.println($ID.text);} | NUM {System.out.println("found);};
--[ 2019.03.10.14.18.31.901.0 ]--
r 9 factor : '(' expr ')' | ID {System.out.println($ID.text);} | NUM {System.out.println("foun);};
--[ 2019.03.10.14.18.32.048.0 ]--
r 9 factor : '(' expr ')' | ID {System.out.println($ID.text);} | NUM {System.out.println("fou);};
--[ 2019.03.10.14.18.32.225.0 ]--
r 9 factor : '(' expr ')' | ID {System.out.println($ID.text);} | NUM {System.out.println("fo);};
--[ 2019.03.10.14.18.32.388.0 ]--
r 9 factor : '(' expr ')' | ID {System.out.println($ID.text);} | NUM {System.out.println("f);};
--[ 2019.03.10.14.18.32.613.0 ]--
r 9 factor : '(' expr ')' | ID {System.out.println($ID.text);} | NUM {System.out.println(");};
--[ 2019.03.10.14.18.32.880.0 ]--
r 9 factor : '(' expr ')' | ID {System.out.println($ID.text);} | NUM {System.out.println();};
--[ 2019.03.10.14.18.35.458.0 ]--
r 9 factor : '(' expr ')' | ID {System.out.println($ID.text);} | NUM {System.out.println($);};
--[ 2019.03.10.14.18.35.729.0 ]--
r 9 factor : '(' expr ')' | ID {System.out.println($ID.text);} | NUM {System.out.println($N);};
--[ 2019.03.10.14.18.35.964.0 ]--
r 9 factor : '(' expr ')' | ID {System.out.println($ID.text);} | NUM {System.out.println($NU);};
--[ 2019.03.10.14.18.36.164.0 ]--
r 9 factor : '(' expr ')' | ID {System.out.println($ID.text);} | NUM {System.out.println($NUM);};
--[ 2019.03.10.14.18.37.005.0 ]--
r 9 factor : '(' expr ')' | ID {System.out.println($ID.text);} | NUM {System.out.println($NUM.);};
--[ 2019.03.10.14.18.37.701.0 ]--
r 9 factor : '(' expr ')' | ID {System.out.println($ID.text);} | NUM {System.out.println($NUM.v);};
--[ 2019.03.10.14.18.37.780.0 ]--
r 9 factor : '(' expr ')' | ID {System.out.println($ID.text);} | NUM {System.out.println($NUM.va);};
--[ 2019.03.10.14.18.37.826.0 ]--
r 9 factor : '(' expr ')' | ID {System.out.println($ID.text);} | NUM {System.out.println($NUM.val);};
--[ 2019.03.10.14.18.37.958.0 ]--
r 9 factor : '(' expr ')' | ID {System.out.println($ID.text);} | NUM {System.out.println($NUM.valu);};
--[ 2019.03.10.14.18.38.028.0 ]--
r 9 factor : '(' expr ')' | ID {System.out.println($ID.text);} | NUM {System.out.println($NUM.value);};
--[ 2019.03.10.14.19.45.378.0 ]--
r 9 factor : '(' expr ')' | ID {System.out.println($ID.text);} | NUM {System.out.println($NUM.valu);};
--[ 2019.03.10.14.19.45.522.0 ]--
r 9 factor : '(' expr ')' | ID {System.out.println($ID.text);} | NUM {System.out.println($NUM.val);};
--[ 2019.03.10.14.19.45.679.0 ]--
r 9 factor : '(' expr ')' | ID {System.out.println($ID.text);} | NUM {System.out.println($NUM.va);};
--[ 2019.03.10.14.19.45.811.0 ]--
r 9 factor : '(' expr ')' | ID {System.out.println($ID.text);} | NUM {System.out.println($NUM.v);};
--[ 2019.03.10.14.19.45.970.0 ]--
r 9 factor : '(' expr ')' | ID {System.out.println($ID.text);} | NUM {System.out.println($NUM.);};
--[ 2019.03.10.14.19.46.408.0 ]--
r 9 factor : '(' expr ')' | ID {System.out.println($ID.text);} | NUM {System.out.println($NUM.t);};
--[ 2019.03.10.14.19.46.500.0 ]--
r 9 factor : '(' expr ')' | ID {System.out.println($ID.text);} | NUM {System.out.println($NUM.te);};
--[ 2019.03.10.14.19.46.747.0 ]--
r 9 factor : '(' expr ')' | ID {System.out.println($ID.text);} | NUM {System.out.println($NUM.tex);};
--[ 2019.03.10.14.19.46.955.0 ]--
r 9 factor : '(' expr ')' | ID {System.out.println($ID.text);} | NUM {System.out.println($NUM.text);};
--[ 2019.03.10.14.19.56.186.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.03.10.14.20.17.636.0 ]--
:/gen/AntlrActionsParser.java
+ 127 			System.out.println("EOF");
r 171 			setState(24);
r 179 				setState(18);
r 181 				setState(19);
+ 183 				System.out.println(";");
r 184 				setState(21);
r 240 			setState(26);
r 242 			setState(27);
r 287 			setState(40);
r 293 				setState(29);
r 295 				setState(30);
+ 297 				System.out.println("+");
r 298 				setState(32);
r 305 				setState(34);
r 307 				setState(35);
+ 309 				System.out.println("-");
r 310 				setState(37);
r 367 			setState(42);
r 369 			setState(43);
r 414 			setState(61);
r 420 				setState(45);
r 422 				setState(46);
+ 424 				System.out.println("*");
r 425 				setState(48);
r 432 				setState(50);
r 434 				setState(51);
+ 436 				System.out.println("/");
r 437 				setState(53);
r 444 				setState(55);
r 446 				setState(56);
+ 448 				System.out.println("MOD");
r 449 				setState(58);
+ 477 		public Token ID;
+ 478 		public Token NUM;
r 507 			setState(71);
r 513 				setState(63);
r 515 				setState(64);
r 517 				setState(65);
+ 524 				setState(67);
r 525 				((FactorContext)_localctx).ID = match(ID);
r 526 				System.out.println((((FactorContext)_localctx).ID!=null?((FactorContext)_localctx).ID.getText():null));
+ 532 				setState(69);
r 533 				((FactorContext)_localctx).NUM = match(NUM);
r 534 				System.out.println((((FactorContext)_localctx).NUM!=null?((FactorContext)_localctx).NUM.getText():null));
+ 553 		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\16L\4\2\t\2\4\3\t"+
+ 554 		"\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\3\2\3\2\3\2\3\2\3\3\3\3\3\3"+
r 555 		"\3\3\3\3\3\3\5\3\33\n\3\3\4\3\4\3\4\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3"+
r 556 		"\5\3\5\3\5\5\5+\n\5\3\6\3\6\3\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3"+
r 557 		"\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7@\n\7\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\5"+
r 558 		"\bJ\n\b\3\b\2\2\t\2\4\6\b\n\f\16\2\2\2L\2\20\3\2\2\2\4\32\3\2\2\2\6\34"+
r 559 		"\3\2\2\2\b*\3\2\2\2\n,\3\2\2\2\f?\3\2\2\2\16I\3\2\2\2\20\21\5\4\3\2\21"+
r 560 		"\22\7\3\2\2\22\23\b\2\1\2\23\3\3\2\2\2\24\25\5\6\4\2\25\26\7\4\2\2\26"+
r 561 		"\27\b\3\1\2\27\30\5\4\3\2\30\33\3\2\2\2\31\33\3\2\2\2\32\24\3\2\2\2\32"+
r 562 		"\31\3\2\2\2\33\5\3\2\2\2\34\35\5\n\6\2\35\36\5\b\5\2\36\7\3\2\2\2\37 "+
r 563 		"\7\5\2\2 !\5\n\6\2!\"\b\5\1\2\"#\5\b\5\2#+\3\2\2\2$%\7\6\2\2%&\5\n\6\2"+
r 564 		"&\'\b\5\1\2\'(\5\b\5\2(+\3\2\2\2)+\3\2\2\2*\37\3\2\2\2*$\3\2\2\2*)\3\2"+
r 565 		"\2\2+\t\3\2\2\2,-\5\16\b\2-.\5\f\7\2.\13\3\2\2\2/\60\7\7\2\2\60\61\5\16"+
r 566 		"\b\2\61\62\b\7\1\2\62\63\5\f\7\2\63@\3\2\2\2\64\65\7\b\2\2\65\66\5\16"+
r 567 		"\b\2\66\67\b\7\1\2\678\5\f\7\28@\3\2\2\29:\7\t\2\2:;\5\16\b\2;<\b\7\1"+
r 568 		"\2<=\5\f\7\2=@\3\2\2\2>@\3\2\2\2?/\3\2\2\2?\64\3\2\2\2?9\3\2\2\2?>\3\2"+
r 569 		"\2\2@\r\3\2\2\2AB\7\n\2\2BC\5\6\4\2CD\7\13\2\2DJ\3\2\2\2EF\7\f\2\2FJ\b"+
r 570 		"\b\1\2GH\7\r\2\2HJ\b\b\1\2IA\3\2\2\2IE\3\2\2\2IG\3\2\2\2J\17\3\2\2\2\6"+
r 571 		"\32*?I";
--[ 2019.03.10.14.20.28.088.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.03.10.14.20.37.779.0 ]--
:/AntlrActions.g4
r 3 start : list 'EOF' {System.out.printl("EOF");};
--[ 2019.03.10.14.20.37.932.0 ]--
r 3 start : list 'EOF' {System.out.print("EOF");};
--[ 2019.03.10.14.20.39.673.0 ]--
r 4 list : expr ';' {System.out.printl(";");} list | ;
--[ 2019.03.10.14.20.40.918.0 ]--
r 4 list : expr ';' {System.out.println(";");} list | ;
--[ 2019.03.10.14.20.46.991.0 ]--
r 3 start : list 'EOF' {System.out.printl("EOF");};
--[ 2019.03.10.14.20.47.232.0 ]--
r 3 start : list 'EOF' {System.out.println("EOF");};
--[ 2019.03.10.14.20.49.023.0 ]--
r 6 terms : '+' term {System.out.printl("+");} terms | '-' term {System.out.println("-");} terms | ;
--[ 2019.03.10.14.20.49.204.0 ]--
r 6 terms : '+' term {System.out.print("+");} terms | '-' term {System.out.println("-");} terms | ;
--[ 2019.03.10.14.20.53.549.0 ]--
r 6 terms : '+' term {System.out.print("+");} terms | '-' term {System.out.printl("-");} terms | ;
--[ 2019.03.10.14.20.53.721.0 ]--
r 6 terms : '+' term {System.out.print("+");} terms | '-' term {System.out.print("-");} terms | ;
--[ 2019.03.10.14.20.55.356.0 ]--
r 8 factors : '*' factor {System.out.printl("*");} factors | '/' factor {System.out.println("/");} factors | 'MOD' factor {System.out.println("MOD");} factors | ;
--[ 2019.03.10.14.20.55.552.0 ]--
r 8 factors : '*' factor {System.out.print("*");} factors | '/' factor {System.out.println("/");} factors | 'MOD' factor {System.out.println("MOD");} factors | ;
--[ 2019.03.10.14.20.56.963.0 ]--
r 8 factors : '*' factor {System.out.print("*");} factors | '/' factor {System.out.printl("/");} factors | 'MOD' factor {System.out.println("MOD");} factors | ;
--[ 2019.03.10.14.20.57.111.0 ]--
r 8 factors : '*' factor {System.out.print("*");} factors | '/' factor {System.out.print("/");} factors | 'MOD' factor {System.out.println("MOD");} factors | ;
--[ 2019.03.10.14.20.58.644.0 ]--
r 8 factors : '*' factor {System.out.print("*");} factors | '/' factor {System.out.print("/");} factors | 'MOD' factor {System.out.printl("MOD");} factors | ;
--[ 2019.03.10.14.20.58.793.0 ]--
r 8 factors : '*' factor {System.out.print("*");} factors | '/' factor {System.out.print("/");} factors | 'MOD' factor {System.out.print("MOD");} factors | ;
--[ 2019.03.10.14.20.59.764.0 ]--
r 9 factor : '(' expr ')' | ID {System.out.println($ID.text);} | NUM {System.out.printl($NUM.text);};
--[ 2019.03.10.14.20.59.920.0 ]--
r 9 factor : '(' expr ')' | ID {System.out.println($ID.text);} | NUM {System.out.print($NUM.text);};
--[ 2019.03.10.14.21.01.195.0 ]--
r 9 factor : '(' expr ')' | ID {System.out.printl($ID.text);} | NUM {System.out.print($NUM.text);};
--[ 2019.03.10.14.21.01.347.0 ]--
r 9 factor : '(' expr ')' | ID {System.out.print($ID.text);} | NUM {System.out.print($NUM.text);};
--[ 2019.03.10.14.21.06.007.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.03.10.14.21.11.826.0 ]--
:/gen/AntlrActions.interp
r 42 [3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 3, 14, 76, 4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7, 9, 7, 4, 8, 9, 8, 3, 2, 3, 2, 3, 2, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 3, 27, 10, 3, 3, 4, 3, 4, 3, 4, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 5, 43, 10, 5, 3, 6, 3, 6, 3, 6, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 5, 7, 64, 10, 7, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 5, 8, 74, 10, 8, 3, 8, 2, 2, 9, 2, 4, 6, 8, 10, 12, 14, 2, 2, 2, 76, 2, 16, 3, 2, 2, 2, 4, 26, 3, 2, 2, 2, 6, 28, 3, 2, 2, 2, 8, 42, 3, 2, 2, 2, 10, 44, 3, 2, 2, 2, 12, 63, 3, 2, 2, 2, 14, 73, 3, 2, 2, 2, 16, 17, 5, 4, 3, 2, 17, 18, 7, 3, 2, 2, 18, 19, 8, 2, 1, 2, 19, 3, 3, 2, 2, 2, 20, 21, 5, 6, 4, 2, 21, 22, 7, 4, 2, 2, 22, 23, 8, 3, 1, 2, 23, 24, 5, 4, 3, 2, 24, 27, 3, 2, 2, 2, 25, 27, 3, 2, 2, 2, 26, 20, 3, 2, 2, 2, 26, 25, 3, 2, 2, 2, 27, 5, 3, 2, 2, 2, 28, 29, 5, 10, 6, 2, 29, 30, 5, 8, 5, 2, 30, 7, 3, 2, 2, 2, 31, 32, 7, 5, 2, 2, 32, 33, 5, 10, 6, 2, 33, 34, 8, 5, 1, 2, 34, 35, 5, 8, 5, 2, 35, 43, 3, 2, 2, 2, 36, 37, 7, 6, 2, 2, 37, 38, 5, 10, 6, 2, 38, 39, 8, 5, 1, 2, 39, 40, 5, 8, 5, 2, 40, 43, 3, 2, 2, 2, 41, 43, 3, 2, 2, 2, 42, 31, 3, 2, 2, 2, 42, 36, 3, 2, 2, 2, 42, 41, 3, 2, 2, 2, 43, 9, 3, 2, 2, 2, 44, 45, 5, 14, 8, 2, 45, 46, 5, 12, 7, 2, 46, 11, 3, 2, 2, 2, 47, 48, 7, 7, 2, 2, 48, 49, 5, 14, 8, 2, 49, 50, 8, 7, 1, 2, 50, 51, 5, 12, 7, 2, 51, 64, 3, 2, 2, 2, 52, 53, 7, 8, 2, 2, 53, 54, 5, 14, 8, 2, 54, 55, 8, 7, 1, 2, 55, 56, 5, 12, 7, 2, 56, 64, 3, 2, 2, 2, 57, 58, 7, 9, 2, 2, 58, 59, 5, 14, 8, 2, 59, 60, 8, 7, 1, 2, 60, 61, 5, 12, 7, 2, 61, 64, 3, 2, 2, 2, 62, 64, 3, 2, 2, 2, 63, 47, 3, 2, 2, 2, 63, 52, 3, 2, 2, 2, 63, 57, 3, 2, 2, 2, 63, 62, 3, 2, 2, 2, 64, 13, 3, 2, 2, 2, 65, 66, 7, 10, 2, 2, 66, 67, 5, 6, 4, 2, 67, 68, 7, 11, 2, 2, 68, 74, 3, 2, 2, 2, 69, 70, 7, 12, 2, 2, 70, 74, 8, 8, 1, 2, 71, 72, 7, 13, 2, 2, 72, 74, 8, 8, 1, 2, 73, 65, 3, 2, 2, 2, 73, 69, 3, 2, 2, 2, 73, 71, 3, 2, 2, 2, 74, 15, 3, 2, 2, 2, 6, 26, 42, 63, 73]
--[ 2019.03.10.14.21.12.073.0 ]--
:/gen/AntlrActionsParser.java
r 297 				System.out.print("+");
r 309 				System.out.print("-");
r 424 				System.out.print("*");
r 436 				System.out.print("/");
r 448 				System.out.print("MOD");
r 526 				System.out.print((((FactorContext)_localctx).ID!=null?((FactorContext)_localctx).ID.getText():null));
r 534 				System.out.print((((FactorContext)_localctx).NUM!=null?((FactorContext)_localctx).NUM.getText():null));
--[ 2019.03.10.14.21.21.516.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.03.10.14.21.33.948.0 ]--
:/AntlrActions.g4
r 6 terms : '+' term {System.out.print("+ ");} terms | '-' term {System.out.print("-");} terms | ;
--[ 2019.03.10.14.21.38.105.0 ]--
r 6 terms : '+' term {System.out.print("+ ");} terms | '-' term {System.out.print("- ");} terms | ;
--[ 2019.03.10.14.21.39.637.0 ]--
r 8 factors : '*' factor {System.out.print("* ");} factors | '/' factor {System.out.print("/");} factors | 'MOD' factor {System.out.print("MOD");} factors | ;
--[ 2019.03.10.14.21.41.198.0 ]--
r 8 factors : '*' factor {System.out.print("* ");} factors | '/' factor {System.out.print("/ ");} factors | 'MOD' factor {System.out.print("MOD");} factors | ;
--[ 2019.03.10.14.21.42.590.0 ]--
r 8 factors : '*' factor {System.out.print("* ");} factors | '/' factor {System.out.print("/ ");} factors | 'MOD' factor {System.out.print("MOD ");} factors | ;
--[ 2019.03.10.14.21.48.542.0 ]--
r 9 factor : '(' expr ')' | ID {System.out.print($ID.text+);} | NUM {System.out.print($NUM.text);};
--[ 2019.03.10.14.21.49.412.0 ]--
r 9 factor : '(' expr ')' | ID {System.out.print($ID.text+");} | NUM {System.out.print($NUM.text);};
--[ 2019.03.10.14.21.49.694.0 ]--
r 9 factor : '(' expr ')' | ID {System.out.print($ID.text+" );} | NUM {System.out.print($NUM.text);};
--[ 2019.03.10.14.21.49.888.0 ]--
r 9 factor : '(' expr ')' | ID {System.out.print($ID.text+" ");} | NUM {System.out.print($NUM.text);};
--[ 2019.03.10.14.21.53.164.0 ]--
r 9 factor : '(' expr ')' | ID {System.out.print($ID.text+" ");} | NUM {System.out.print($NUM.text+);};
--[ 2019.03.10.14.21.54.226.0 ]--
r 9 factor : '(' expr ')' | ID {System.out.print($ID.text+" ");} | NUM {System.out.print($NUM.text+");};
--[ 2019.03.10.14.21.54.435.0 ]--
r 9 factor : '(' expr ')' | ID {System.out.print($ID.text+" ");} | NUM {System.out.print($NUM.text+" );};
--[ 2019.03.10.14.21.54.655.0 ]--
r 9 factor : '(' expr ')' | ID {System.out.print($ID.text+" ");} | NUM {System.out.print($NUM.text+" ");};
--[ 2019.03.10.14.21.56.996.0 ]--
:/gen/AntlrActionsParser.java
r 297 				System.out.print("+ ");
r 309 				System.out.print("- ");
r 424 				System.out.print("* ");
r 436 				System.out.print("/ ");
r 448 				System.out.print("MOD ");
r 526 				System.out.print((((FactorContext)_localctx).ID!=null?((FactorContext)_localctx).ID.getText():null)+" ");
r 534 				System.out.print((((FactorContext)_localctx).NUM!=null?((FactorContext)_localctx).NUM.getText():null)+" ");
--[ 2019.03.10.14.22.06.783.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.03.10.14.22.25.279.0 ]--
:/AntlrActions.g4
+ 2 
--[ 2019.03.10.14.22.25.472.0 ]--
+ 2 
--[ 2019.03.10.14.50.27.003.0 ]--
:/rdp.py
r 110             dictList[line].append({'item': item, 'line_pos': (pos-len(item)), 'line_num': line+1, 'tag': tag})    
r 232         print(str(i['item'])+' (line '+str(i['line_num'])+':'+str(i['line_pos'])+')', end=", ")
+ 241 
+ 242     print(listOfStatements)
+ 243     print(dictList)
--[ 2019.03.10.14.53.16.066.0 ]--
:/AntlrActions.g4
r 3 l
--[ 2019.03.10.14.53.16.227.0 ]--
r 3 lo
--[ 2019.03.10.14.53.16.311.0 ]--
r 3 loc
--[ 2019.03.10.14.53.16.493.0 ]--
r 3 loca
--[ 2019.03.10.14.53.16.543.0 ]--
r 3 local
--[ 2019.03.10.14.53.16.605.0 ]--
r 3 locals
--[ 2019.03.10.14.53.17.491.0 ]--
+ 4 
--[ 2019.03.10.14.53.19.021.0 ]--
r 4 H
--[ 2019.03.10.14.53.19.147.0 ]--
r 4 Ha
--[ 2019.03.10.14.53.19.240.0 ]--
r 4 Has
--[ 2019.03.10.14.53.19.379.0 ]--
r 4 Hast
--[ 2019.03.10.14.53.20.128.0 ]--
r 4 Has
--[ 2019.03.10.14.53.20.363.0 ]--
r 4 Hash
--[ 2019.03.10.14.53.20.548.0 ]--
r 4 Hasht
--[ 2019.03.10.14.53.20.620.0 ]--
r 4 Hashta
--[ 2019.03.10.14.53.20.781.0 ]--
r 4 Hashtab
--[ 2019.03.10.14.53.20.890.0 ]--
r 4 Hashtabl
--[ 2019.03.10.14.53.20.992.0 ]--
r 4 Hashtable
--[ 2019.03.10.14.53.24.178.0 ]--
+ 5 
--[ 2019.03.10.14.53.24.581.0 ]--
r 5 E
--[ 2019.03.10.14.53.24.653.0 ]--
r 5 EN
--[ 2019.03.10.14.53.24.832.0 ]--
r 5 ENu
--[ 2019.03.10.14.53.25.043.0 ]--
r 5 ENum
--[ 2019.03.10.14.53.25.105.0 ]--
r 5 ENume
--[ 2019.03.10.14.53.25.233.0 ]--
r 5 ENumer
--[ 2019.03.10.14.53.25.461.0 ]--
r 5 ENume
--[ 2019.03.10.14.53.25.608.0 ]--
r 5 ENum
--[ 2019.03.10.14.53.25.749.0 ]--
r 5 ENu
--[ 2019.03.10.14.53.26.034.0 ]--
r 5 EN
--[ 2019.03.10.14.53.26.198.0 ]--
r 5 ENn
--[ 2019.03.10.14.53.26.611.0 ]--
r 5 EN
--[ 2019.03.10.14.53.26.782.0 ]--
r 5 E
--[ 2019.03.10.14.53.26.989.0 ]--
r 5 En
--[ 2019.03.10.14.53.27.182.0 ]--
r 5 Enu
--[ 2019.03.10.14.53.27.377.0 ]--
r 5 Enum
--[ 2019.03.10.14.53.27.451.0 ]--
r 5 Enume
--[ 2019.03.10.14.53.27.590.0 ]--
r 5 Enumer
--[ 2019.03.10.14.53.27.693.0 ]--
r 5 Enumera
--[ 2019.03.10.14.53.27.763.0 ]--
r 5 Enumerat
--[ 2019.03.10.14.53.27.856.0 ]--
r 5 Enumerati
--[ 2019.03.10.14.53.27.919.0 ]--
r 5 Enumeratio
--[ 2019.03.10.14.53.28.056.0 ]--
r 5 Enumeration
